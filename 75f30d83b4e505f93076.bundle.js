(self.webpackChunkbrowser_text_rpg_wp=self.webpackChunkbrowser_text_rpg_wp||[]).push([[57],{523:(e,t,o)=>{"use strict";o.d(t,{A:()=>u});var n=o(354),i=o.n(n),r=o(314),a=o.n(r),s=o(417),l=o.n(s),c=new URL(o(127),o.b),d=a()(i()),h=l()(c);d.push([e.id,`:root {\n    --purple1: #0F3325; \n    --purple2: #1E2B21;\n    --purple3: #2E634F; \n    --grey: #282828;\n}\n\n@font-face {\n    font-family: 'VT';\n    src: url(${h}) format('truetype');\n    font-weight: 400;\n    font-style: normal;\n}\n\nhtml, body {\n    margin: 0;\n    height: 100%;\n    color: white;\n    font-family: 'VT';\n    font-size: 110%;\n}\n\n.mainMenuContainer {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    justify-content: space-between;\n}\n\n.mainMenu button {\n    font-size: 140%;\n}\n\n.container {\n    min-height: 100%;\n    display: grid;\n    grid-template-columns: 2fr 2fr 2fr 2fr 3fr;\n    grid-template-rows: 70px 450px 1fr 70px;\n}\n\n.top_bar {\n    padding: 10px;\n    background-color: var(--purple3);\n    grid-column: 1 / 7;\n}\n\n.image_window {\n    padding: 10px;\n    background-color: var(--purple1);\n    grid-column: 1 / 3;\n    grid-row: 2 / 4;\n}\n\n.image_window button {\n    font-size: 100%;\n}\n\n.image_window button:hover {\n    background-color: var(--purple3);\n}\n\n.image_window p {\n    margin-bottom: 5px;\n}\n\n.main_window {\n    padding: 10px;\n    background-color: var(--purple1);\n    grid-column: 3 / 5;\n    grid-row: 2 / 4;\n    font-size: 100%;\n}\n\n.main_window p, .main_window button, .main_window input {\n    opacity: 0;\n    animation: fadeIn 1s ease-out forwards;\n}\n\n.main_window select {\n    background-color: var(--grey);\n    padding: 5px;\n    font-family: 'VT';\n    margin-right:1000px;\n    margin-bottom: 10px;\n    color: white;\n}\n\ninput.checkmark[type=checkbox] {\n    background-color: white;\n    outline: var(--grey) solid 2px;\n    border: 2px solid white;\n    appearance: none;\n}\n\ninput.checkmark[type=checkbox]:checked {\n    background-color: var(--grey);\n}\n\noption {\n    font-family: 'VT';\n}\n\ndialog {\n    opacity: 0;\n    animation: fadeIn 1s ease-out forwards;\n}\n\n.hide {\n    animation: fadeOut 1s ease-out forwards;\n}\n\n@keyframes fadeIn {\n    from {\n        opacity: 0;\n    }\n    to {\n        opacity: 1;\n    }\n}\n\n@keyframes fadeOut{\n    from {\n        opacity: 1;\n    }\n    to {\n        opacity: 0;\n    }\n}\n\n.main_window button {\n    font-size: 90%;\n    margin-bottom: 10px;\n}\n\n.main_window .choiceButton {\n    display: block;\n}\n\n.main_window button:hover{\n    background-color: var(--purple3);\n}\n\n.main_window input {\n    background-color: var(--grey);\n    color: white;\n    font-family: 'VT';\n    font-size: 100%;\n    margin-right: 5px;\n    padding: 5px;\n    border: 1px solid var(--purple1);\n}\n\n.main_window input[type=submit] {\n    background-color: var(--grey);\n    color: white;\n    font-family: 'VT';\n    font-size: 100%;\n    padding: 5px;\n    border: 1px solid var(--purple1);\n}\n\n.main_window input[type=submit]:hover {\n    background-color: var(--purple3);\n}\n\n.button_window {\n    padding: 10px;\n    background-color: var(--purple3);\n    grid-column: 1 / 7;\n    grid-row: 4;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    gap: 20px;\n}\n\nbutton {\n    background-color: var(--grey);\n    color: white;\n    font-family: 'VT';\n    border: none;\n}\n\nbutton:hover {\n    background-color: var(--purple3);\n}\n\n.button_window button {\n    font-size: 150%;\n}\n\n.log {\n    overflow: auto;\n    padding: 10px;\n    background-color: var(--purple2);\n    grid-column: 5 / 6;\n}\n\n.menu {\n    padding: 10px;\n    background-color: var(--purple2);\n    grid-column: 5 / 6;\n}\n\ndialog {\n    background-color: var(--purple2);\n    color: white;\n    font-size: 85%;\n    max-width: 500px;\n}\n\n#closeButton, #closeButton2 {\n    margin-left:450px;\n    font-size:80%;\n}\n\n.stats_meter {\n    border: 1px solid white;\n    display: grid;\n    grid-template-columns: 50fr 50fr;\n}\n\n#stats_meter_evil {\n    margin-top: 15px;\n}\n\n#stats_line_evil, #stats_line_somber {\n    background-color: maroon;\n    padding-left: 5px;\n}\n\n#stats_line_benevolent, #stats_line_silly {\n    background-color: blue;\n    padding-left: 5px;\n}\n\n@media screen and (max-width:768px) {\n    .container {\n        min-height: 100%;\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        grid-template-rows: 50px 580px 250px 65px;\n    }\n    p:first-child {\n        margin-top: 0;\n    }\n    .top_bar {\n        grid-column: 1 / 3;\n        grid-row: 1 / 5;\n    }\n    .image_window {\n        grid-column: 1;\n        grid-row: 2;\n        font-size: 80%;\n    }\n    #explorationBoard {\n        display: flex;\n        flex-direction: column;\n    }\n    .main_window {\n        grid-column: 2;\n        grid-row: 2;\n        overflow: scroll;\n    }\n    .button_window {\n        grid-column: 1 / 3;\n        grid-row: 4;\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        grid-template-rows: 1fr 1fr;\n        gap: 5px;\n    }\n    .button_window button {\n        font-size: 90%;\n    }\n    .log {\n        grid-column: 1;\n        grid-row: 3;\n        font-size: 80%;\n    }\n    .menu {\n        grid-column: 2;\n        grid-row: 3;\n    }\n    dialog {\n        max-width: 270px;\n    }\n    #closeButton, #closeButton2 {\n        margin-left:250px;\n        font-size:80%;\n    }\n    .main_window input[type=text] {\n        width:120px;\n    }\n}\n\n.death {\n    background-color: rgb(0, 0, 0, 0.5);\n}`,"",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,kBAAkB;IAClB,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,iBAAiB;IACjB,+DAAsD;IACtD,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,SAAS;IACT,YAAY;IACZ,YAAY;IACZ,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,YAAY;IACZ,8BAA8B;AAClC;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,gBAAgB;IAChB,aAAa;IACb,0CAA0C;IAC1C,uCAAuC;AAC3C;;AAEA;IACI,aAAa;IACb,gCAAgC;IAChC,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,gCAAgC;IAChC,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,gCAAgC;AACpC;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,gCAAgC;IAChC,kBAAkB;IAClB,eAAe;IACf,eAAe;AACnB;;AAEA;IACI,UAAU;IACV,sCAAsC;AAC1C;;AAEA;IACI,6BAA6B;IAC7B,YAAY;IACZ,iBAAiB;IACjB,mBAAmB;IACnB,mBAAmB;IACnB,YAAY;AAChB;;AAEA;IACI,uBAAuB;IACvB,8BAA8B;IAC9B,uBAAuB;IACvB,gBAAgB;AACpB;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,UAAU;IACV,sCAAsC;AAC1C;;AAEA;IACI,uCAAuC;AAC3C;;AAEA;IACI;QACI,UAAU;IACd;IACA;QACI,UAAU;IACd;AACJ;;AAEA;IACI;QACI,UAAU;IACd;IACA;QACI,UAAU;IACd;AACJ;;AAEA;IACI,cAAc;IACd,mBAAmB;AACvB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,gCAAgC;AACpC;;AAEA;IACI,6BAA6B;IAC7B,YAAY;IACZ,iBAAiB;IACjB,eAAe;IACf,iBAAiB;IACjB,YAAY;IACZ,gCAAgC;AACpC;;AAEA;IACI,6BAA6B;IAC7B,YAAY;IACZ,iBAAiB;IACjB,eAAe;IACf,YAAY;IACZ,gCAAgC;AACpC;;AAEA;IACI,gCAAgC;AACpC;;AAEA;IACI,aAAa;IACb,gCAAgC;IAChC,kBAAkB;IAClB,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,SAAS;AACb;;AAEA;IACI,6BAA6B;IAC7B,YAAY;IACZ,iBAAiB;IACjB,YAAY;AAChB;;AAEA;IACI,gCAAgC;AACpC;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,cAAc;IACd,aAAa;IACb,gCAAgC;IAChC,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,gCAAgC;IAChC,kBAAkB;AACtB;;AAEA;IACI,gCAAgC;IAChC,YAAY;IACZ,cAAc;IACd,gBAAgB;AACpB;;AAEA;IACI,iBAAiB;IACjB,aAAa;AACjB;;AAEA;IACI,uBAAuB;IACvB,aAAa;IACb,gCAAgC;AACpC;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,wBAAwB;IACxB,iBAAiB;AACrB;;AAEA;IACI,sBAAsB;IACtB,iBAAiB;AACrB;;AAEA;IACI;QACI,gBAAgB;QAChB,aAAa;QACb,8BAA8B;QAC9B,yCAAyC;IAC7C;IACA;QACI,aAAa;IACjB;IACA;QACI,kBAAkB;QAClB,eAAe;IACnB;IACA;QACI,cAAc;QACd,WAAW;QACX,cAAc;IAClB;IACA;QACI,aAAa;QACb,sBAAsB;IAC1B;IACA;QACI,cAAc;QACd,WAAW;QACX,gBAAgB;IACpB;IACA;QACI,kBAAkB;QAClB,WAAW;QACX,aAAa;QACb,8BAA8B;QAC9B,2BAA2B;QAC3B,QAAQ;IACZ;IACA;QACI,cAAc;IAClB;IACA;QACI,cAAc;QACd,WAAW;QACX,cAAc;IAClB;IACA;QACI,cAAc;QACd,WAAW;IACf;IACA;QACI,gBAAgB;IACpB;IACA;QACI,iBAAiB;QACjB,aAAa;IACjB;IACA;QACI,WAAW;IACf;AACJ;;AAEA;IACI,mCAAmC;AACvC",sourcesContent:[":root {\n    --purple1: #0F3325; \n    --purple2: #1E2B21;\n    --purple3: #2E634F; \n    --grey: #282828;\n}\n\n@font-face {\n    font-family: 'VT';\n    src: url('./KGNoRegretsSketch.ttf') format('truetype');\n    font-weight: 400;\n    font-style: normal;\n}\n\nhtml, body {\n    margin: 0;\n    height: 100%;\n    color: white;\n    font-family: 'VT';\n    font-size: 110%;\n}\n\n.mainMenuContainer {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    justify-content: space-between;\n}\n\n.mainMenu button {\n    font-size: 140%;\n}\n\n.container {\n    min-height: 100%;\n    display: grid;\n    grid-template-columns: 2fr 2fr 2fr 2fr 3fr;\n    grid-template-rows: 70px 450px 1fr 70px;\n}\n\n.top_bar {\n    padding: 10px;\n    background-color: var(--purple3);\n    grid-column: 1 / 7;\n}\n\n.image_window {\n    padding: 10px;\n    background-color: var(--purple1);\n    grid-column: 1 / 3;\n    grid-row: 2 / 4;\n}\n\n.image_window button {\n    font-size: 100%;\n}\n\n.image_window button:hover {\n    background-color: var(--purple3);\n}\n\n.image_window p {\n    margin-bottom: 5px;\n}\n\n.main_window {\n    padding: 10px;\n    background-color: var(--purple1);\n    grid-column: 3 / 5;\n    grid-row: 2 / 4;\n    font-size: 100%;\n}\n\n.main_window p, .main_window button, .main_window input {\n    opacity: 0;\n    animation: fadeIn 1s ease-out forwards;\n}\n\n.main_window select {\n    background-color: var(--grey);\n    padding: 5px;\n    font-family: 'VT';\n    margin-right:1000px;\n    margin-bottom: 10px;\n    color: white;\n}\n\ninput.checkmark[type=checkbox] {\n    background-color: white;\n    outline: var(--grey) solid 2px;\n    border: 2px solid white;\n    appearance: none;\n}\n\ninput.checkmark[type=checkbox]:checked {\n    background-color: var(--grey);\n}\n\noption {\n    font-family: 'VT';\n}\n\ndialog {\n    opacity: 0;\n    animation: fadeIn 1s ease-out forwards;\n}\n\n.hide {\n    animation: fadeOut 1s ease-out forwards;\n}\n\n@keyframes fadeIn {\n    from {\n        opacity: 0;\n    }\n    to {\n        opacity: 1;\n    }\n}\n\n@keyframes fadeOut{\n    from {\n        opacity: 1;\n    }\n    to {\n        opacity: 0;\n    }\n}\n\n.main_window button {\n    font-size: 90%;\n    margin-bottom: 10px;\n}\n\n.main_window .choiceButton {\n    display: block;\n}\n\n.main_window button:hover{\n    background-color: var(--purple3);\n}\n\n.main_window input {\n    background-color: var(--grey);\n    color: white;\n    font-family: 'VT';\n    font-size: 100%;\n    margin-right: 5px;\n    padding: 5px;\n    border: 1px solid var(--purple1);\n}\n\n.main_window input[type=submit] {\n    background-color: var(--grey);\n    color: white;\n    font-family: 'VT';\n    font-size: 100%;\n    padding: 5px;\n    border: 1px solid var(--purple1);\n}\n\n.main_window input[type=submit]:hover {\n    background-color: var(--purple3);\n}\n\n.button_window {\n    padding: 10px;\n    background-color: var(--purple3);\n    grid-column: 1 / 7;\n    grid-row: 4;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    gap: 20px;\n}\n\nbutton {\n    background-color: var(--grey);\n    color: white;\n    font-family: 'VT';\n    border: none;\n}\n\nbutton:hover {\n    background-color: var(--purple3);\n}\n\n.button_window button {\n    font-size: 150%;\n}\n\n.log {\n    overflow: auto;\n    padding: 10px;\n    background-color: var(--purple2);\n    grid-column: 5 / 6;\n}\n\n.menu {\n    padding: 10px;\n    background-color: var(--purple2);\n    grid-column: 5 / 6;\n}\n\ndialog {\n    background-color: var(--purple2);\n    color: white;\n    font-size: 85%;\n    max-width: 500px;\n}\n\n#closeButton, #closeButton2 {\n    margin-left:450px;\n    font-size:80%;\n}\n\n.stats_meter {\n    border: 1px solid white;\n    display: grid;\n    grid-template-columns: 50fr 50fr;\n}\n\n#stats_meter_evil {\n    margin-top: 15px;\n}\n\n#stats_line_evil, #stats_line_somber {\n    background-color: maroon;\n    padding-left: 5px;\n}\n\n#stats_line_benevolent, #stats_line_silly {\n    background-color: blue;\n    padding-left: 5px;\n}\n\n@media screen and (max-width:768px) {\n    .container {\n        min-height: 100%;\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        grid-template-rows: 50px 580px 250px 65px;\n    }\n    p:first-child {\n        margin-top: 0;\n    }\n    .top_bar {\n        grid-column: 1 / 3;\n        grid-row: 1 / 5;\n    }\n    .image_window {\n        grid-column: 1;\n        grid-row: 2;\n        font-size: 80%;\n    }\n    #explorationBoard {\n        display: flex;\n        flex-direction: column;\n    }\n    .main_window {\n        grid-column: 2;\n        grid-row: 2;\n        overflow: scroll;\n    }\n    .button_window {\n        grid-column: 1 / 3;\n        grid-row: 4;\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        grid-template-rows: 1fr 1fr;\n        gap: 5px;\n    }\n    .button_window button {\n        font-size: 90%;\n    }\n    .log {\n        grid-column: 1;\n        grid-row: 3;\n        font-size: 80%;\n    }\n    .menu {\n        grid-column: 2;\n        grid-row: 3;\n    }\n    dialog {\n        max-width: 270px;\n    }\n    #closeButton, #closeButton2 {\n        margin-left:250px;\n        font-size:80%;\n    }\n    .main_window input[type=text] {\n        width:120px;\n    }\n}\n\n.death {\n    background-color: rgb(0, 0, 0, 0.5);\n}"],sourceRoot:""}]);const u=d},314:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var o="",n=void 0!==t[5];return t[4]&&(o+="@supports (".concat(t[4],") {")),t[2]&&(o+="@media ".concat(t[2]," {")),n&&(o+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),o+=e(t),n&&(o+="}"),t[2]&&(o+="}"),t[4]&&(o+="}"),o})).join("")},t.i=function(e,o,n,i,r){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(n)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);n&&a[d[0]]||(void 0!==r&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=r),o&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=o):d[2]=o),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),t.push(d))}},t}},417:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},354:e=>{"use strict";e.exports=function(e){var t=e[1],o=e[3];if(!o)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),r="/*# ".concat(i," */");return[t].concat([r]).join("\n")}return[t].join("\n")}},7:e=>{"use strict";var t,o="object"==typeof Reflect?Reflect:null,n=o&&"function"==typeof o.apply?o.apply:function(e,t,o){return Function.prototype.apply.call(e,t,o)};t=o&&"function"==typeof o.ownKeys?o.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function r(){r.init.call(this)}e.exports=r,e.exports.once=function(e,t){return new Promise((function(o,n){function i(o){e.removeListener(t,r),n(o)}function r(){"function"==typeof e.removeListener&&e.removeListener("error",i),o([].slice.call(arguments))}f(e,t,r,{once:!0}),"error"!==t&&function(e,t,o){"function"==typeof e.on&&f(e,"error",t,{once:!0})}(e,i)}))},r.EventEmitter=r,r.prototype._events=void 0,r.prototype._eventsCount=0,r.prototype._maxListeners=void 0;var a=10;function s(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?r.defaultMaxListeners:e._maxListeners}function c(e,t,o,n){var i,r,a,c;if(s(o),void 0===(r=e._events)?(r=e._events=Object.create(null),e._eventsCount=0):(void 0!==r.newListener&&(e.emit("newListener",t,o.listener?o.listener:o),r=e._events),a=r[t]),void 0===a)a=r[t]=o,++e._eventsCount;else if("function"==typeof a?a=r[t]=n?[o,a]:[a,o]:n?a.unshift(o):a.push(o),(i=l(e))>0&&a.length>i&&!a.warned){a.warned=!0;var d=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");d.name="MaxListenersExceededWarning",d.emitter=e,d.type=t,d.count=a.length,c=d,console&&console.warn&&console.warn(c)}return e}function d(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function h(e,t,o){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:o},i=d.bind(n);return i.listener=o,n.wrapFn=i,i}function u(e,t,o){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:"function"==typeof i?o?[i.listener||i]:[i]:o?function(e){for(var t=new Array(e.length),o=0;o<t.length;++o)t[o]=e[o].listener||e[o];return t}(i):m(i,i.length)}function p(e){var t=this._events;if(void 0!==t){var o=t[e];if("function"==typeof o)return 1;if(void 0!==o)return o.length}return 0}function m(e,t){for(var o=new Array(t),n=0;n<t;++n)o[n]=e[n];return o}function f(e,t,o,n){if("function"==typeof e.on)n.once?e.once(t,o):e.on(t,o);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(r){n.once&&e.removeEventListener(t,i),o(r)}))}}Object.defineProperty(r,"defaultMaxListeners",{enumerable:!0,get:function(){return a},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");a=e}}),r.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},r.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},r.prototype.getMaxListeners=function(){return l(this)},r.prototype.emit=function(e){for(var t=[],o=1;o<arguments.length;o++)t.push(arguments[o]);var i="error"===e,r=this._events;if(void 0!==r)i=i&&void 0===r.error;else if(!i)return!1;if(i){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var l=r[e];if(void 0===l)return!1;if("function"==typeof l)n(l,this,t);else{var c=l.length,d=m(l,c);for(o=0;o<c;++o)n(d[o],this,t)}return!0},r.prototype.addListener=function(e,t){return c(this,e,t,!1)},r.prototype.on=r.prototype.addListener,r.prototype.prependListener=function(e,t){return c(this,e,t,!0)},r.prototype.once=function(e,t){return s(t),this.on(e,h(this,e,t)),this},r.prototype.prependOnceListener=function(e,t){return s(t),this.prependListener(e,h(this,e,t)),this},r.prototype.removeListener=function(e,t){var o,n,i,r,a;if(s(t),void 0===(n=this._events))return this;if(void 0===(o=n[e]))return this;if(o===t||o.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,o.listener||t));else if("function"!=typeof o){for(i=-1,r=o.length-1;r>=0;r--)if(o[r]===t||o[r].listener===t){a=o[r].listener,i=r;break}if(i<0)return this;0===i?o.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(o,i),1===o.length&&(n[e]=o[0]),void 0!==n.removeListener&&this.emit("removeListener",e,a||t)}return this},r.prototype.off=r.prototype.removeListener,r.prototype.removeAllListeners=function(e){var t,o,n;if(void 0===(o=this._events))return this;if(void 0===o.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==o[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete o[e]),this;if(0===arguments.length){var i,r=Object.keys(o);for(n=0;n<r.length;++n)"removeListener"!==(i=r[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=o[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},r.prototype.listeners=function(e){return u(this,e,!0)},r.prototype.rawListeners=function(e){return u(this,e,!1)},r.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},r.prototype.listenerCount=p,r.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},72:e=>{"use strict";var t=[];function o(e){for(var o=-1,n=0;n<t.length;n++)if(t[n].identifier===e){o=n;break}return o}function n(e,n){for(var r={},a=[],s=0;s<e.length;s++){var l=e[s],c=n.base?l[0]+n.base:l[0],d=r[c]||0,h="".concat(c," ").concat(d);r[c]=d+1;var u=o(h),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var m=i(p,n);n.byIndex=s,t.splice(s,0,{identifier:h,updater:m,references:1})}a.push(h)}return a}function i(e,t){var o=t.domAPI(t);return o.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;o.update(e=t)}else o.remove()}}e.exports=function(e,i){var r=n(e=e||[],i=i||{});return function(e){e=e||[];for(var a=0;a<r.length;a++){var s=o(r[a]);t[s].references--}for(var l=n(e,i),c=0;c<r.length;c++){var d=o(r[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}r=l}}},659:e=>{"use strict";var t={};e.exports=function(e,o){var n=function(e){if(void 0===t[e]){var o=document.querySelector(e);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(e){o=null}t[e]=o}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(o)}},540:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,o)=>{"use strict";e.exports=function(e){var t=o.nc;t&&e.setAttribute("nonce",t)}},825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(o){!function(e,t,o){var n="";o.supports&&(n+="@supports (".concat(o.supports,") {")),o.media&&(n+="@media ".concat(o.media," {"));var i=void 0!==o.layer;i&&(n+="@layer".concat(o.layer.length>0?" ".concat(o.layer):""," {")),n+=o.css,i&&(n+="}"),o.media&&(n+="}"),o.supports&&(n+="}");var r=o.sourceMap;r&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,o)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},287:(e,t,o)=>{const n=new(o(7));e.exports=n},860:(e,t,o)=>{"use strict";let n=document.querySelector(".main_window"),i={result:0,reRollFlag:!1},r={result:0,reRollFlag:!1},a={result:0,reRollFlag:!1},s={result:0,reRollFlag:!1},l={result:0,reRollFlag:!1},c={result:0,reRollFlag:!1},d=[i,r,a,s,l,c],h=[],u={player:"",numberOfDice:0,dots:0},p={accuser:"",numberOfDice:0,dots:0};function m(){return Math.floor(4*Math.random()+1)}function f(e,t,o,i){let r=document.createElement("p");if(0==u.numberOfDice){for(;n.firstChild;)n.removeChild(n.firstChild);r.textContent="You re-roll some dice.";let a=document.createElement("p");a.textContent=`Your new hand is: ${d[0].result}, ${d[1].result}, ${d[2].result}, ${d[3].result}, ${d[4].result}, ${d[5].result}. Time for the first bluffing phase.`,n.appendChild(r),n.appendChild(a),y(e,t,o,i)}else{r.textContent=`Your hand is: ${d[0].result}, ${d[1].result}, ${d[2].result}, ${d[3].result}, ${d[4].result}, ${d[5].result}. Do you want to bluff, or accuse the opponent?`,n.appendChild(r);let a=document.createElement("div");n.appendChild(a);let s=document.createElement("button");s.textContent="Bluff",s.style.marginRight="5px",a.appendChild(s);let l=document.createElement("button");l.textContent="Accuse",a.appendChild(l),s.addEventListener("click",(()=>{n.removeChild(a),y(e,t,o,i)})),l.addEventListener("click",(()=>{n.removeChild(a),p.accuser="Player",p.numberOfDice=u.numberOfDice,p.dots=u.dots,v(b(),e,t,o,i)}))}}function y(e,t,o,i){let r=document.createElement("form");n.appendChild(r);let a=document.createElement("label");a.textContent="I have this many...",a.setAttribute("for","numberOfDice"),r.appendChild(a);let s=document.createElement("select");if(s.setAttribute("name","numberOfDice"),s.setAttribute("id","numberOfDice"),r.appendChild(s),0!==u.numberOfDice)for(let e=u.numberOfDice;e<=6;e++){let t=document.createElement("option");t.textContent=e,t.setAttribute("value",e),s.appendChild(t)}else for(let e=1;e<=6;e++){let t=document.createElement("option");t.textContent=e,t.setAttribute("value",e),s.appendChild(t)}let l=document.createElement("label");l.textContent="of this dice...",l.setAttribute("for","dots"),r.appendChild(l);let c=document.createElement("select");c.setAttribute("name","dots"),c.setAttribute("id","dots"),r.appendChild(c);for(let e=0;e<4;e++){let t=document.createElement("option");t.textContent=`${e+1}`,t.setAttribute("value",e+1),c.appendChild(t)}let d=document.createElement("input");d.setAttribute("type","submit"),d.setAttribute("value","Bluff!"),r.appendChild(d),r.addEventListener("submit",(function(r){if(s.value==u.numberOfDice)if(c.value<=u.dots){r.preventDefault();let e=document.createElement("p");e.setAttribute("style","color:yellow"),e.textContent="[You can only bid higher than your opponent!]",n.appendChild(e)}else{for(r.preventDefault(),u={player:"player",numberOfDice:s.value,dots:c.value};n.firstChild;)n.removeChild(n.firstChild);let a=document.createElement("p");a.textContent=`You bid: "I have ${u.numberOfDice} of ${u.dots} dots".`,n.appendChild(a),w(e,t,o,i)}else{for(r.preventDefault(),u={player:"player",numberOfDice:s.value,dots:c.value};n.firstChild;)n.removeChild(n.firstChild);let a=document.createElement("p");a.textContent=`You bid: "I have ${u.numberOfDice} of ${u.dots} dots".`,n.appendChild(a),w(e,t,o,i)}}))}function g(){return Math.floor(2*Math.random()+1)}function w(e,t,o,i){if(u.numberOfDice>2){p={accuser:"opponent",numberOfDice:u.numberOfDice,dots:u.dots};let r=document.createElement("p");r.textContent=`${e}: "${t.accuseLine}".`,n.appendChild(r);let a=document.createElement("button");a.textContent="Continue",n.appendChild(a),a.addEventListener("click",(()=>{n.removeChild(a),v(b(),e,t,o,i)}))}else if(2==u.numberOfDice)if(2==g()){p={accuser:"opponent",numberOfDice:u.numberOfDice,dots:u.dots};let r=document.createElement("p");r.textContent=`${e}: "${t.accuseLine}".`,n.appendChild(r);let a=document.createElement("button");a.textContent="Continue",n.appendChild(a),a.addEventListener("click",(()=>{n.removeChild(a),v(b(),e,t,o,i)}))}else A(e,t,o,i);else A(e,t,o,i)}function A(e,t,o,i){let r=h.filter((e=>1==e)),a=h.filter((e=>2==e)),s=h.filter((e=>3==e)),l=h.filter((e=>4==e)),c=[{number:r.length,dots:1},{number:a.length,dots:2},{number:s.length,dots:3},{number:l.length,dots:4}].sort(((e,t)=>e.number>t.number?-1:1));console.log(c);let d={player:"opponent",numberOfDice:0,dots:0};d.dots=c[0].dots;let p=Math.floor(3*Math.random()+1);d.numberOfDice=1==p?c[0].number:2==p?c[0].number+1:c[0].number-1,u.numberOfDice>d.numberOfDice?d.dots>u.dots?d.numberOfDice=u.numberOfDice:c[1].dots>u.dots&&2==g()?(d.dots=c[1].dots,d.numberOfDice=u.numberOfDice):d.numberOfDice=u.numberOfDice+1:u.numberOfDice==d.numberOfDice&&d.dots<=u.dots&&(d.numberOfDice=u.numberOfDice+1),u=d;let m=document.createElement("p");m.textContent=`${e}: "${t.bluffLine}".`,n.appendChild(m);let y=document.createElement("p");y.textContent=`"I rolled ${u.numberOfDice} dice with ${u.dots} dots."`,n.appendChild(y),f(e,t,o,i)}function b(){if("opponent"==p.accuser){let e=d.filter((e=>e.result==p.dots));return console.log(`ALL CORRECT DOTS: ${e}`),console.log(`ACCUSATION DOTS: ${p.dots}`),console.log(`ACCUSATION NUMBER OF DICE: ${p.numberOfDice}`),e.length>=p.numberOfDice?"playerWins":"opponentWins"}{let e=h.filter((e=>e==p.dots));return console.log(`ALL CORRECT DOTS: ${e}`),console.log(`ACCUSATION DOTS: ${p.dots}`),console.log(`ACCUSATION NUMBER OF DICE: ${p.numberOfDice}`),e.length>=p.numberOfDice?"opponentWins":"playerWins"}}function v(e,t,o,i,r){let a=document.createElement("p");"Player"==p.accuser?a.textContent=`Accusation! You and ${t} check the bluff. Your opponent is the bluffer. They said they have ${p.numberOfDice} of ${p.dots} dots. Time to see if they're bluffing.`:a.textContent=`Accusation! You and ${t} check the bluff. You are the bluffer. You said that you've got ${p.numberOfDice} of ${p.dots} dots. ${t} checks if you're bluffing.`,n.appendChild(a);let s=document.createElement("button");s.textContent="Let us find out",n.appendChild(s),s.addEventListener("click",(()=>{n.removeChild(s),function(e,t,o,i,r){let a=document.createElement("p");if("playerWins"==e){let e=document.createElement("p");e.textContent="And.... You win!",n.appendChild(e),a.textContent=`${t}: "${o.loseLine}."`,n.appendChild(a),i("win",r)}else{let e=document.createElement("p");e.textContent=`And.... ${t} wins!`,n.appendChild(e),a.textContent=`${t}: "${o.winLine}."`,n.appendChild(a),i("lose",r)}}(e,t,o,i,r)}))}var C=o(72),x=o.n(C),k=o(825),S=o.n(k),Y=o(659),I=o.n(Y),B=o(56),E=o.n(B),T=o(540),M=o.n(T),L=o(113),_=o.n(L),P=o(523),$={};$.styleTagTransform=_(),$.setAttributes=E(),$.insert=I().bind(null,"head"),$.domAPI=S(),$.insertStyleElement=M(),x()(P.A,$),P.A&&P.A.locals&&P.A.locals;const q=o.p+"a0118664855979475e8b.jpg",N=o(287);let O,H=[];function W(e){if(e.currentHP<=0){let t=document.createElement("p");t.textContent=`${e.name} dies!`,t.setAttribute("style","color:yellow"),de.appendChild(t);let o=H.findIndex((t=>t.name==e.name));H.splice(o,1),0==H.length&&N.emit("battle:win")}F()}function F(){if(ne.currentHP<=0){N.emit("battle:lose");for(let e=0;e<he.children.length;e++)"button"==he.children[e].tagName.toLowerCase()&&he.removeChild(he.children[e]);for(let e=0;e<ue.children.length;e++)"button"==ue.children[e].tagName.toLowerCase()&&ue.removeChild(ue.children[e]);for(;ce.firstChild;)ce.removeChild(ce.firstChild);let e=document.createElement("div");e.setAttribute("style","position:absolute;height:100%;width:100%;z-index:500;overflow:hidden;"),e.classList.add("death"),document.querySelector(".container").appendChild(e)}}function D(){let e=document.querySelector("#explorationBoard");Array.from(ue.children).forEach((t=>{t!==e&&ue.removeChild(t)})),H.forEach((e=>{let t=document.createElement("p"),o=document.createElement("button");t.textContent=`${e.name} is there. It has AC of ${e.armorClass}, attack bonus of ${e.monsterAttackBonus} and HP of ${e.currentHP}/${e.maxHP}.`,o.textContent="Select",o.setAttribute("id",e.name),o.addEventListener("click",(()=>{return O=t=e,void(ce.textContent=`Selected enemy: ${t.name}.`);var t})),ue.appendChild(t),ue.appendChild(o)}))}document.querySelector("#attackButton").addEventListener("click",(()=>ne.attack(O)));let R=["Spirit Slam","Spectral Blade","Wrathful Visage"],j=["Spirit Slam","Withering Bolt","Essence Drain"],z=["Spirit Slam","Spirit Blessing","Bind of the Guardian"],J=0,G="";function Q(e){if(""!==G){e instanceof ee?(J=(J+1)%R.length,e.specialAttack=R[J]):e instanceof te?(J=(J+1)%j.length,e.specialAttack=j[J]):e instanceof oe&&(J=(J+1)%z.length,e.specialAttack=z[J]);let t=document.createElement("p");t.textContent=`You get ready to use ${e.specialAttack}.`,de.appendChild(t)}}N.on("Wraith",(()=>{G="Wraith"})),N.on("Poltergeist",(()=>{G="Poltergeist"})),N.on("GuardianSpirit",(()=>{G="GuardianSpirit"}));class U{static instances=[];static getAllInstances(){return U.instances}constructor(e,t,o,n,i){this.name=e,this.description=t,this.raceAttackBonus=o,this.raceHPBonus=n,this.raceArmorBonus=i}}let V={Human:new U("person from an unknown land","[initial race]",0,0,0),Realmer:new U("Realmer","[stocky and stout, blah blah]",1,0,0),Mortar:new U("Mortar","[stocky and stout, blah blah]",0,0,1),Deadlander:new U("Deadlander","[stocky and stout, blah blah]",0,15,0)},Z=document.querySelector(".log");function K(e,t,o,n,i,r,a,s,l,c,d,h,u,p){this.name=e,this.attackBonus=t,this.armorClass=o,this.currentHP=n,this.maxHP=i,this.specialAttack=r,this.equippedWeapon="",this.equippedArmor="",this.equippedMisc="",this.inventory=[],this.race=d,this.spiritConcept={concept:u,description:p}}function X(e,t,o,n,i,r){this.name=e,this.monsterAttackBonus=t,this.armorClass=o,this.currentHP=n,this.maxHP=i,this.status=r}function ee(e,t,o,n,i,r,a,s,l,c,d,h,u,p){K.call(this,e,t,o,n,i,r,a,s,l,c,d,h,u,p)}function te(e,t,o,n,i,r,a,s,l,c,d,h,u,p){K.call(this,e,t,o,n,i,r,a,s,l,c,d,h,u,p)}function oe(e,t,o,n,i,r,a,s,l,c,d,h,u,p){K.call(this,e,t,o,n,i,r,a,s,l,c,d,h,u,p)}K.prototype.attack=function(e){if(0!==H.length)if(void 0!==e){if(H.forEach((e=>{if("burning"==e.status){e.currentHP=e.currentHP-5,W(e);let t=document.createElement("p");t.textContent=`${e.name} is burning for 5 damage!`,t.setAttribute("style","color:yellow"),Z.appendChild(t)}})),H.forEach((e=>{e.status=""})),Array.from(Z.children).forEach((e=>{e.setAttribute("style","color:white;")})),e.currentHP>0){let t=Math.floor(20*Math.random()+1+this.attackBonus);""!==ne.equippedWeapon&&(t+=this.equippedWeapon.itemAttack),""!==ne.equippedArmor&&(t=+t+this.equippedArmor.itemAttack),""!==ne.equippedMisc&&(t=+t+this.equippedMisc.itemAttack);let o="",n=0,i=0;switch(this.specialAttack){case"Normal Attack":break;case"Spectral Blade":o=" with the Spectral Blade (-2 accuracy, +2 damage if hits)",n=-2,i=4;break;case"Spirit Blessing":n=-1e3;break;case"Withering Bolt":o=" with the Withering Bolt (-4 accuracy, but +6 damage if hits)",n=-4,i=6;break;case"Wrathful Visage":o=" with the Wrathful Visage (-4 accuracy, but stuns the target)",n=-4,t+n>e.armorClass&&(e.status="stunned");break;case"Bind of the Guardian":o=" with the Bind of the Guardian (-4 accuracy, but stuns the target)",n=-4,t+n>e.armorClass&&(e.status="stunned");break;case"Essence Drain":o=" with the Essence Drain (-4 accuracy, but sets target on fire for one turn)",n=-4,t+n>e.armorClass&&(e.status="burning")}if(""!==this.race&&(n+=this.race.raceAttackBonus),t+n>e.armorClass){e.currentHP-=t+n+i-e.armorClass;let r=document.createElement("p");r.textContent=`${this.name} attacks ${e.name}${o}! The attack hits and deals ${t+n+i-e.armorClass} damage!`,r.setAttribute("style","color:yellow"),Z.appendChild(r),W(e),D()}else if("Spirit Blessing"==this.specialAttack){let e,t=this.maxHP-this.currentHP;t>5?(this.currentHP=this.currentHP+5,e=5):t>0?(e=t,this.currentHP=this.maxHP):e=0;let o=document.createElement("p");o.textContent=`${this.name} casts Spirit Blessing, healing themself for ${e} HP!`,o.setAttribute("style","color:yellow"),Z.appendChild(o),re()}else{let t=document.createElement("p");t.textContent=`${this.name} attacks ${e.name}! The attack misses!`,t.setAttribute("style","color:yellow"),Z.appendChild(t)}0!==H.length&&H.forEach((e=>{if("stunned"!==e.status)e.counterattack();else if("stunned"==e.status){let t=document.createElement("p");t.textContent=`${e.name} is stunned!`,t.setAttribute("style","color:yellow"),Z.appendChild(t)}}))}}else{let e=document.createElement("p");e.textContent="Which monster do I attack?",Z.appendChild(e)}else{let e=document.createElement("p");e.textContent="No monsters around.",Z.appendChild(e)}},Object.setPrototypeOf(ee.prototype,K.prototype),Object.setPrototypeOf(te.prototype,K.prototype),Object.setPrototypeOf(oe.prototype,K.prototype);let ne=new K("Somebody",0,10,40,100,"Normal Attack","","","",[],V.Human,{concept:"",description:""}),ie={goblin_grunt:new X("Goblin",0,10,40,40,""),goblin_fighter:new X("Goblin Fighter",2,13,25,25,""),goblin_shaman:new X("Goblin Shaman",3,16,30,30,""),goblin_chieftain:new X("Goblin Chieftain",5,17,40,40,""),wizard:new X("Half Dead Old Guy",-1,10,5,5,""),imp1:new X("Red Imp",0,5,5,5,""),imp2:new X("Blue Imp",0,5,5,5,""),wisp1:new X("Wisp",0,0,10,10),wisp2:new X("Wisp",0,0,10,10),wisp3:new X("Wisp",0,0,10,10)};function re(){ne.race=V.Human,document.querySelector(".menu").textContent=ne instanceof ee?`You are ${ne.name}. Your are a Wraith${ne.spiritConcept.description}. In life, you were a ${ne.race.name}. Your armor class is ${ne.armorClass}. Your HP is ${ne.currentHP}/${ne.maxHP}.`:ne instanceof te?`You are ${ne.name}. Your are a Poltergeist${ne.spiritConcept.description}. In life, you were a ${ne.race.name}. Your armor class is ${ne.armorClass}. Your HP is ${ne.currentHP}/${ne.maxHP}.`:ne instanceof oe?`You are ${ne.name}. Your are a Guardian Spirit${ne.spiritConcept.description}. In life, you were a ${ne.race.name}. Your armor class is ${ne.armorClass}. Your HP is ${ne.currentHP}/${ne.maxHP}.`:`You are ${ne.name}. Your class is unknown. Your armor class is ${ne.armorClass}. Your HP is ${ne.currentHP}/${ne.maxHP}.`}X.prototype.counterattack=function(){let e=Math.floor(20*Math.random()+1)+this.monsterAttackBonus;if(e>ne.armorClass){ne.currentHP-=e-ne.armorClass,ne.currentHP<0&&(ne.currentHP=0),re();let t=document.createElement("p");t.textContent=`${this.name} attacks ${ne.name}! The attack hits and deals ${e-ne.armorClass} damage!`,t.setAttribute("style","color:yellow"),Z.appendChild(t),F()}else{let e=document.createElement("p");e.textContent=`${this.name} attacks ${ne.name}! The attack misses!`,e.setAttribute("style","color:yellow"),Z.appendChild(e)}};class ae{constructor(e,t,o,n,i,r){this.name=e,this.surname=t,this.he=o,this.his=n,this.him=i,this.himself=r}}function se(e,t,o,n,i,r){return new ae(e,t,o,n,i,r)}const le=o.p+"a1985140f1679450d63c.mp3";let ce=document.querySelector(".top_bar"),de=document.querySelector(".log"),he=document.querySelector(".main_window"),ue=document.querySelector(".image_window"),pe=document.querySelector(".menu"),me=document.querySelector(".button_window"),fe=document.querySelector("#attackButton"),ye=document.querySelector("#specialButton"),ge=document.querySelector("#inventoryButton"),we=document.querySelector("#statsButton");function Ae(e){let t=e&&e.target?e.target:e;"DIALOG"==t.tagName?t.close():t.remove(),t.classList.remove("hide"),t.removeEventListener("animationend",Ae)}pe.textContent=`You are ${ne.name}. Your class is unknown. Your armor class is ${ne.armorClass}. Your HP is ${ne.currentHP}/${ne.maxHP}.`;let be=document.createElement("dialog");be.setAttribute("style","height:75%;width:100%;z-index:1000;overflow:hidden;"),document.body.appendChild(be),be.innerHTML="\n<div class='mainMenuContainer'>\n    <div style='display:flex;justify-content:center;border-bottom:5px solid silver'>\n        <h1 style='margin-bottom: 5px;'>What Makes You Live?</h1>\n    </div>\n    <h1 style='text-align:center;margin-bottom:-20px;'>Main Menu</h2>   \n    <div class='mainMenu' style='display:flex;flex-direction:column;justify-content:center;align-items:center;margin-top:50px;'>\n        <button id='startGameButton' style='display:block;margin:0 auto; border: 3px solid silver; border-radius: 5px; margin-bottom:20px;width:250px;'>Start game</button>\n        <button id='settingsButton' style='display:block;margin:0 auto; border: 3px solid silver; border-radius: 5px; margin-bottom:20px;width:250px;'>Settings</button>\n        <button id='aboutButton' style='display:block;margin:0 auto; border: 3px solid silver; border-radius: 5px; margin-bottom:20px;width:250px;'>About the creator</button>\n        <button id='contactButton' style='display:block;margin:0 auto; border: 3px solid silver; border-radius: 5px; margin-bottom:0;width:250px;'>Contact me</button>\n    </div>\n    <br>\n    <p style='color:white;font-size:80%;'><i>Note: If you play on mobile, scroll to the bottom of the screen to see the action buttons.</i></p>\n</div>\n    ",be.showModal();let ve=document.createElement("audio");ve.setAttribute("id","audio"),ve.setAttribute("control","control"),ve.setAttribute("loop","loop");let Ce=document.createElement("source");Ce.setAttribute("src",`${le}`),Ce.setAttribute("type","audio/mpeg"),ve.appendChild(Ce),document.body.appendChild(ve);let xe=document.createElement("div");xe.setAttribute("style","background-color:black;position:absolute;height:100%;width:100%;z-index:500;overflow:hidden;");let ke=document.createElement("div");ke.setAttribute("style",`height:100%;width:100%;opacity:0.5;background-image:url("${q}");background-position:center;background-size:cover;overflow:hidden;`),xe.appendChild(ke),document.querySelector(".container").appendChild(xe),document.body.style.overflow="hidden";let Se=document.querySelector("#startGameButton"),Ye=!1;Se.addEventListener("click",(()=>{be.classList.add("hide"),be.addEventListener("animationend",(()=>{Ae(be),Ye=!0,ve.play(),Ye&&(xe.classList.add("hide"),xe.addEventListener("animationend",Ae),document.body.style.overflow="visible")}))}));let Ie=document.createElement("dialog");Ie.setAttribute("style","max-width:500px;"),Ie.innerHTML="\n    <button id='closeButton'>Close</button>\n    <div id='inventoryBox'>\n        <h2>Inventory</h2>\n        <div id='equippedBox'>\n            Equipped weapon: <span id='equippedWeaponBox'></span>\n            <br>\n            Equipped armor: <span id='equippedArmorBox'></span>\n            <br>\n            Equipped misc: <span id='equippedMiscBox'></span>\n        </div>\n        <br>\n        <br>\n        Gold: <span id='goldBox'></span>\n        <br>\n        <div id='allBox'>\n            Bag:\n            <ul id='allList'>\n            </ul>\n        </div>\n    </div>\n",document.body.appendChild(Ie),ge.addEventListener("click",(()=>{Ie.showModal(),document.querySelector("#closeButton").addEventListener("click",(()=>{Ie.classList.add("hide"),Ie.addEventListener("animationend",Ae)}))}));let Be=0,Ee=document.querySelector("#goldBox");function Te(e){Be+=e,Ee.textContent=Be}Ee.textContent=Be;let Me=document.querySelector("#equippedWeaponBox"),Le=document.querySelector("#equippedArmorBox"),_e=document.querySelector("#equippedMiscBox"),Pe=document.querySelector("#allList");function $e(e){if(ne.inventory.includes(e))switch(e.type){case"weapon":if(""==ne.equippedWeapon){ne.equippedWeapon=e,ne.armorClass=ne.armorClass+ne.equippedWeapon.itemArmor,Me.textContent=`${e.name}`;let t=document.querySelector(`#${e.id}`);t.textContent="Unequip",t.removeEventListener("click",(()=>$e(e))),t.addEventListener("click",(()=>qe(e))),re()}break;case"armor":if(""==ne.equippedArmor){ne.equippedArmor=e,ne.armorClass=ne.armorClass+ne.equippedArmor.itemArmor,Le.textContent=`${e.name}`;let t=document.querySelector(`#${e.id}`);t.textContent="Unequip",t.removeEventListener("click",(()=>$e(e))),t.addEventListener("click",(()=>qe(e))),re()}break;case"misc":if(""==ne.equippedMisc){ne.equippedMisc=e,ne.armorClass=ne.armorClass+ne.equippedMisc.itemArmor,_e.textContent=`${e.name}`;let t=document.querySelector(`#${e.id}`);t.textContent="Unequip",t.removeEventListener("click",(()=>$e(e))),t.addEventListener("click",(()=>qe(e))),re()}}}function qe(e){if(ne.equippedWeapon==e||ne.equippedArmor==e||ne.equippedMisc==e){ne.equippedWeapon==e?(ne.armorClass=ne.armorClass-ne.equippedWeapon.itemArmor,ne.equippedWeapon="",Me.textContent=""):ne.equippedArmor==e?(ne.armorClass=ne.armorClass-ne.equippedArmor.itemArmor,ne.equippedArmor="",Le.textContent=""):ne.equippedMisc==e&&(ne.armorClass=ne.armorClass-ne.equippedMisc.itemArmor,ne.equippedMisc="",_e.textContent=""),re();let t=document.querySelector(`#${e.id}`);t.textContent="Equip",t.removeEventListener("click",(()=>qe(e))),t.addEventListener("click",(()=>$e(e)))}}function Ne(e,t,o,n,i){return{name:e,type:t,itemAttack:o,itemArmor:n,id:i}}let Oe=Ne("Magic Sword","weapon",20,0,"n1"),He=Ne("Magic Armor","armor",0,2,"n2"),We=Ne("Magic Ring","misc",1,1,"n3"),Fe=Ne("Ultra Sword","weapon",40,0,"n4"),De=Ne("Ultra Armor","armor",0,4,"n5"),Re=Ne("Ultra Ring","misc",2,2,"n6"),je=Ne("Rusty Sword","weapon",1,0,"n7"),ze=Ne("Rusty Armor","armor",0,1,"n8"),Je=Ne("Gold Ring","misc",0,1,"n9"),Ge=Ne("Health Potion","quest item",0,0,"n10"),Qe=Ne("Dimly Glowing Ball","misc",0,1,"n11"),Ue={goldenDagger:Ne("Dagger of the Highfate","weapon",2,0,"n12"),wispBall:Qe,magicArmor:He,magicRing:We,magicSword:Oe,ultraArmor:De,ultraRing:Re,ultraSword:Fe,rustyArmor:ze,rustySword:je,goldRing:Je,healthPotion:Ge};const Ve=o.p+"5377b107b78fe75c2885.png",Ze=o.p+"826bfd9b6291010c09c1.png";let Ke=document.createElement("img");Ke.setAttribute("style","height:15px;width:15px;"),Ke.src=`${Ve}`;let Xe=document.createElement("img");Xe.setAttribute("style","height:15px;width:15px;"),Xe.src=`${Ve}`;let et=document.createElement("img");et.setAttribute("style","height:15px;width:15px;"),et.src=`${Ve}`;let tt=document.createElement("img");tt.setAttribute("style","height:15px;width:15px;"),tt.src=`${Ze}`;let ot={iconTree:Ke,iconTree2:Xe,iconTree3:et,iconPerson:tt};class nt{constructor(e,t,o,n){this.type=e,this.text=t,this.modifiers=o,this.nextStoryElement=n,nt.instances.push(this)}static instances=[];static getAllInstances(){return nt.instances}}let it=new nt("description",["[This is the end of the prototype!]","[Thank you for playing and let me know what you think!]"],void 0,void 0),rt=new nt("description",["[This is the end of the prototype!]","[Thank you for playing and let me know what you think!]"],void 0,void 0),at=new nt("description",["[This is the end of the prototype!]","[Thank you for playing and let me know what you think!]"],void 0,void 0),st=new nt("description",["[This is the end of the prototype!]","[Thank you for playing and let me know what you think!]"],void 0,void 0),lt=new nt("description",["[This is the end of the prototype!]","[Thank you for playing and let me know what you think!]"],void 0,void 0),ct=new nt("description",["[This is the end of the prototype!]","[Thank you for playing and let me know what you think!]"],void 0,void 0),dt=new nt("choice",["You have a few ideas on how to make contact with ChosenName..."],[{choiceText:"You wait for ChosenName to start reading, and change the words in xis book.",choiceModifiers:"firstAppearance_book",choiceNextStory:it},{choiceText:"You wait for ChosenName to fall asleep, and alter xis dreams.",choiceModifiers:"firstAppearance_dreams",choiceNextStory:rt},{choiceText:"You wait till ChosenName's alone on watch, and draw the symbol of Justice on a nearby tree.",choiceModifiers:"firstAppearance_tree",choiceNextStory:at},{choiceText:"You wait till the others are asleep, and change the shape of ChosenName's shadow caused by the campfire.",choiceModifiers:"firstAppearance_shadow",choiceNextStory:st},{choiceText:"You search for an animal, and give it a command to approach the camp when the others are asleep.",choiceModifiers:"firstAppearance_animal",choiceNextStory:lt},{choiceText:"You wait for ChosenName to get a drink or polish xis armor, then alter the reflection.",choiceModifiers:"firstAppearance_reflection",choiceNextStory:ct}],void 0),ht=new nt("description",["After a little bit of thinking and testing, far from the camp, you determine that all you can do for now as a Spirit, is to manipulate inanimate objects.","Theoretically, you also feel that you might be able to give little commands to non-human animals, and, if you concentrate hard, fill dreams of slumbering folks with images."],void 0,dt),ut=new nt("description",["Now, how to make contact?","Humans can't see, hear or touch Spirits directly.","Spirits are told to have magical abilities.","The only beings in the world to have them, actually.","Those would be handy right about now.","You try to feel what you can do."],void 0,ht),pt=new nt("description",["Captain Peculiar is the obvious choice.","In reality, you know nothing about these people's pasts, yet you're supposed to pick which one's most suitable to be the Chosen of Justice.","Who's more likely to BELIEVE they're Chosen, rather.","Peculiar's in charge, which means she's probably accomplished the most. Right?"],void 0,ut),mt=new nt("description",["Captain Peculiar and Lysander are honorable, military types.","It will be much harder to trick them into believing that they are the chosen ones.","Snapdragon, who looks egotistical, handsome and popular, is the obvious choice.","He'll be easier to convince that he's the Chosen One.","Right?"],void 0,ut),ft=new nt("description",["You stop yourself for a moment.","Not just your survival as a Spirit is at stake.","This choice will have consequence on the entire Fated Realm.","The person you appear to and try to convince that they are the Chosen of the Phoenix of Justice will become a big deal eventually.","Lysander, a true warrior, a dependable, no-nonsense soldier, will carry this status the best."],void 0,ut),yt=new nt("choice",["Question is: who to appear to?","Who portrays the idea of Justice the most? Or, who would BELIEVE that they are the Chosen of Justice?","Who do you make the Chosen one?"],[{choiceText:"Captain Peculiar, the serious commander who seems to be in tune with others; needs.",choiceModifiers:"chosenPeculiar",choiceNextStory:pt},{choiceText:"Snapdragon, his easy and mischievous smile tells you that he's too egotistical to not believe that he's the Chosen one.",choiceModifiers:"chosenSnapdragon",choiceNextStory:mt},{choiceText:"Lysander. A true, restless warrior with impeccable care for their gear and vigilance in their eyes.",choiceModifiers:"chosenLysander",choiceNextStory:ft}],void 0),gt=new nt("description",["You now know what you have to do.","You have to make your first contact seem as legitimate as possible.","Make contact with one of them, and make them believe they are the Chosen one. Chosen of the Phoenix of Justice.","Even though you really have no idea what you're doing."],void 0,yt),wt=new nt("description",["A 'Chosen warrior'.","That's what you need to do if you want to seem legitimate to them.","That's right!","The trio would have heard tales of Spirits too.","So if you pick one of them, whoever seems to most fit the idea of Justice, and slowly become their guide, their divine messenger...","...This person will believe that they're the Chosen of Justice."],void 0,gt),At=new nt("description",["This is a question, actually.","Should you make contact with one of them, or with all of them at once?","Literally every tale about Spirits portrayed them as guides, divine messengers of the Phoenixes. The Gods.","The Spirits of myths appear to Chosen warriors, those who showed dedication to the Spirit's concept.","The Spirit will first show signs to the Chosen warrior, signs that the warrior is on the right path."],void 0,wt),bt=new nt("description",["All this information will surely be useful if you want your first ghostly contact with the three to be successful.","You're likely to have one shot at this.","You need to make contact with them, or one of them."],void 0,At),vt=new nt("description",["You feel yourself growing weaker. You're about to diseappear from not serving the Phoenix of Justice.","You did learn a bunch about the three, however.","Their names: Captain Peculiar, Snapdragon and Lysander.","Their allegiance: the Adventurer's Guild, and what they're doing here: answering the New Dawn Edict.","The location fits - the Forest of Mirrors, where you currently are, is to the east of the Fated Realm's main cities. Between the Fated Realm and the Dead Lands."],void 0,bt),Ct=new nt("description",["Adventurer's Guild members usually travel alone. They're taught to be self-sufficient, and to pick contracts suitable for their skill levels.","Yet there are three of them here, and that fits of this 'New Dawn Edict' from Captain Peculiar's document.","The New Dawn Edict.","According to the document you saw in Peculiar's satchel, an open mission from the Highfate herself, for Adventurers to venture into the Dead Lands."],void 0,vt),xt=new nt("description",["You know of the Adventurer's Guild.","You don't remember your previous life, when you've been, you assume, a human.","However, you notice that you do retain memories of the Fated Realm, its culture, like nicknames and organizations."],void 0,Ct),kt=new nt("description",["Yes, it looks like the three belong to the Adventurer's Guild.","The Fated Realm's Adventurer's Guild is a loose union of skilled fighters.","They travel the Fated Realm, usually alone, taking on contracts from people to assist with wild creatures, bandits, or stray undead that might have wandered into the Realm's eastern regions from the Dead Lands."],void 0,xt),St=new nt("description",["The last person, androgynous-looking, with shoulder length red hair, is Lysander.","They wear the heaviest armor and seem to be the weapons specialist of the three.","Lysander's armor is perfectly maintained, even in this weather. So well, in fact, that they are even wearing their official Adventurer's League badge - giving you a chance to read their full name - Lysander MacAppleby, of the Adventurer's Guild."],void 0,kt),Yt=new nt("description",['"Peculiar" is probably a nickname. Nicknames are common in the Fated Realm.',"The long-haired man is Peculiar's younger brother, Snapdragon, or Snap.","He seems to be the most uncomfortable here in the frozen wilderness.","Perhaps that's judgmental, but you assume that he's happier and more resourceful in a bustling city."],void 0,St),It=new nt("description",["You decide to be methodical in how you approach them.","After all, if you botch your one chance to make contact, there might not be any other people around to preach Justice to, and you will disappear.","You can't take that chance, so you watch the trio for another hour or so.","You learn that the one you assumed to be in charge is Captain Peculiar. A serious woman with olive skin and dark hair who's always paying attention to her two companions."],void 0,Yt),Bt=new nt("choice",["You feel your vision getting even blurrier. Floating is harder and harder with each passing minute.","You need to make contact, to promote the idea of Justice to them, or to one of them, or you'll disappear.","You're not sure what happens to Spirits if they disappear without performing their function.","You have to make a decision. Do you try to use your abilities to make contact with one of them? Or do you wait, and keep watching?"],[{choiceText:"I will wait, and keep watching. I need to gather more information about the three before I can effectively communicate.",choiceModifiers:null,choiceNextStory:It},{choiceText:"I need to make contact. I can feel that I am disappearing and I'll only get weaker with each wasted minute.",choiceModifiers:null,choiceNextStory:At}],void 0),Et=new nt("description",['"Reading the edict again, sister?" a voice says as the second man, the one with the long hair and the easy smile, scoots over closer to the commander.','"Do you need anything, Snap?" the woman responds, ignoring his comment. There\'s a hint of concern in her voice.','"Nah, I\'m fine. As fine as I can be," Snap chuckles and the short exchange is over."'],void 0,Bt),Tt=new nt("description",["The commander puts back the document, but you did manage to read a little.","The document described something called the New Dawn Edict.","An open call, a mission, from the Highfate for any adventurer to answer.","Before the commander put away the document, you managed to see that the mission of the New Dawn Edict involves traveling to the Dead Lands - land of undead and nomadic necromancers beyond the eastern border of the Fated Realm."],void 0,Et),Mt=new nt("description",["Luckily for you, the commander decides to retrieve the piece of paper, and starts to read it.","You quickly float over behind her shoulder, reading the paper to try to find out more about the three.","Floating closer to the commander, you get a better look at her face.","She's in her early 40's. Olive skin, dark hair, solemn, exhausted, in-charge expression. Cigarette butts in a small garbage sack near her."],void 0,Tt),Lt=new nt("description",["The trio keep sitting near the fire.","You notice that the first woman, the commander, has a piece of paper sticking out of her rucksack.","The piece of paper bears the seal of the Highfate, the leader and protector of the Fated Realms.","Whoever, these three are, they're not only armed, but on official business, it seems."],void 0,Mt),_t=new nt("description",["You linger near their camp, watching the trio from different angles.","The reality of your new condition is slowly setting in. Like before, the trio don't hear you, don't see you, and can't touch you.","You push these thoughts away. You're alive. In a new form. With a new mission of Justice.","But alive. And to stay alive, you need these people. You need them to embrace Justice.","The mood in the camp is solemn, but determined. Perhaps this is to be expected, considering the surroundings and the weather.","The Forest of Mirrors is an unforgiving place indeed."],void 0,Lt),Pt=new nt("description",["The last person around the campfire is a figure with shoulder-length red hair.","They look like the youngest of the trio, perhaps in their late 20's.","Despite that, they carry themselves with the poise of a seasoned warrior. They appear incredibly vigilant, as if awaiting a command."],void 0,_t),$t=new nt("description",["To her right is a man with long hair framing his face. He seems to be in his early 30's.","His demeanor is charming, his smile easy, inviting with a hint of mischief.","There's a sense of restlessness about him, as if he's constantly seeking something just out of reach."],void 0,Pt),qt=new nt("description",["Despite the biting cold of the blizzard, she sits with a sense of control, her posture rigid.","She seems to be in her early 40's. Her face bears the marks of hardship, with lines etched deeply around her eyes and mouth.","Two scimitars and a musket are resting next to her. Judging by her outfit, she seems to be the one in charge.","Despite her outward appearance of stoicism, you sense a deep-seated fatigue, as if she's tired of always being the one in charge."],void 0,$t),Nt=new nt("description",["The three people are armed - you see muskets and swords next to them. They look like soldiers, mercenaries, or guards of some sort.","It's kind of calming - to finally see some humans.","Despite the fact that it's too late for you.","No, stop it. It's not too late. You've died, but you're not dead. You're a Spirit. And you can survive.","The first woman huddles by the campfire, the olive skin of her face glowing softly in the firelight."],void 0,qt),Ot=new nt("description",["Then you remember that Spirits are the only beings in the world who have magical abilities. No human or animal possesses them.","To promote their concepts, Spirits have the abilities to affect the material world in ghostly ways. The more powerful the Spirit, the more substantial the effects.","You can't touch or talk to these people, but you have to start somewhere. Start promoting Justice, or you'll disappear.","First of all, who are these people?"],void 0,Nt),Ht=new nt("description",["Well, there are people right here.",'To keep going, you tell yourself - "I\'m not dead".','"I died, but I\'m not dead."',"Whoever you were in life, you did enough for the Phoenix of Justice to make you a Spirit of Justice.","You're not dead. You're able to think and to see.","You exist. In a different form now. And you can still save yourself, save your new form.","You just have to do your job and promote Justice.","You're not sure how you're supposed to do it, considering that these people can't hear you."],void 0,Ot),Wt=new nt("description",["Right. So you must be a Spirit of a Phoenix of Justice. Of a Sun. Of the God of Justice.","It's pretty much common knowledge that Spirits exist to further promote the concept, or portfolio, of their Phoenix.","If they fail to promote their concept, the Spirit disappears. Dies, forever","Oh, Gods, is that why you've been feeling weaker and weaker!?","You rise to your 'feet', in panic again. Without promoting the idea of Justice to somebody, you'll disappear. And soon, your body feels it."],void 0,Ht),Ft=new nt("choice",["[You can now switch your attacks using the special button.]",'"My Phoenix". That\'s right.',"You're a Spirit, an Envoy of a Phoenix.","It means that in life, you must have worshipped one of the 20 Suns, or Phoenixes, how they're also called. Done enough, in fact, to have been made a Spirit of that Sun.","Why is it so hard to recall the details of your life?","You concentrate again, sitting there in the snow.","Snowflakes fall right through you. How did you not notice that? Perhaps from the panic, and from your rabid search for help.","'Which Sun did I worship in life?' You think."],[{choiceText:"The Phoenix of Compassion.",choiceModifiers:"compassionSpirit",choiceNextStory:Wt},{choiceText:"The Phoenix of Justice.",choiceModifiers:"justiceSpirit",choiceNextStory:Wt},{choiceText:"The Phoenix of Freedom.",choiceModifiers:"freedomSpirit",choiceNextStory:Wt},{choiceText:"The Phoenix of Mastery.",choiceModifiers:"masterySpirit",choiceNextStory:Wt},{choiceText:"The Phoenix of Wisdom.",choiceModifiers:"wisdomSpirit",choiceNextStory:Wt}],void 0),Dt=new nt("choice",["You don't know enough about them. You wonder what kind of Spirit you are.","You close your non-existent eyes. The answer is within you, you just have to feel it."],[{choiceText:"I am a Wraith, a spirit that brings punishment to those who wrong my Phoenix.",choiceModifiers:"classWraith",choiceNextStory:Ft},{choiceText:"I am a Poltergeist. Watcher, seer, subtle mastermind in the service of my Phoenix.",choiceModifiers:"classPoltergeist",choiceNextStory:Ft},{choiceText:"I am a Guardian Spirit, I exist to guide and protect those who follow my Phoenix.",choiceModifiers:"classGuardianSpirit",choiceNextStory:Ft}],void 0),Rt=new nt("description",["You must be a Spirit.","People who did a lot in the service of a Phoenix reincarnate into Spirits when they die.","There are different kinds of Spirits, you're pretty sure."],void 0,Dt),jt=new nt("description",["You sit there for a moment. You stare at the three, then you stare at their fire, mind completely blank.","You're dead.","You're conscious, however. You have to be a Spirit, right?","You concentrate - what do you know of Spirits?","When people die, they reincarnate into animals. When animals die, they reincarnate into people.","However, if the dying person had done enough in the worship of one of the 20 Suns, they reincarnate into a Spirit."],void 0,Rt),zt=new nt("description",["A little while later, you are sitting not far from the three people's camp, just behind their backs.","Close enough to see the fire, yet you still don't feel it's warmth.","The embrace of death is too cold.","You tried calling out to them, or touching them. They can't see or hear you.","By now, your reality is irrefutable.","You didn't wake up in the Forest of Mirrors.","You died here."],void 0,jt),Jt=new nt("description",["Your mind races, panicking. There are people right here! People who might help! You made it, you saved yourself! So what the hell is wrong?","Your mind slowly accepts what it has been trying to ignore for all this time.","You pass through solid objects.","You don't feel the cold.","You don't remember anything about your life."],void 0,zt),Gt=new nt("description",["You lean on the tree and squint, trying to make anything out, when something unexpected happens.","As you go to lean on the tree, your hand passes right through it, disappearing into the bark.","You instinctively leap back. You approach the tree again, trying to touch it once more.","The result is the same. Your hand passes right through the tree.","What the hell is going on?"],void 0,Jt),Qt=new nt("description",["You can see muskets and scimitars lying next to the three huddled figures.","They are armed. Mercenaries? Soldiers? Robbers indeed?","Your vision is really blurry now. You're not sure why.","The blizzard doesn't help either. And although you're hiding behind a tree only a few dozen meters away from the three figures, you still can't make out much more than that."],void 0,Gt),Ut=new nt("description",["You slow down. They could be robbers on the run from one of the Fated Realm's cities, or cultists of one of evil Suns.","You stop approaching them and dash behind a nearby tree.","You feel weaker with every passing minute. Nevertheless, you decide to watch them for a little while.","To make sure they won't harm you in your desperate state."],void 0,Qt),Vt=new nt("description",["A little while later, you are sitting not far from the three people's camp, just behind their backs.","Close enough to see the fire, yet you still don't feel it's warmth.","The embrace of death is too cold.","You tried touching the trees, or even the fire. Nothing. You pass right through.","By now, your reality is irrefutable.","You didn't wake up in the Forest of Mirrors.","You died here."],void 0,jt),Zt=new nt("description",["You slowly walk up to one of the people, and try to tap on their shoulder.","You reach out towards their coat with your hand.","When you try to tap their shoulder, your hand passes right through their body.","You retract your hand and step back, horrified.","You try again, and the result is the same. Your hand passes right through them."],void 0,Vt),Kt=new nt("description",["Your mind races, panicking. There are people right here! People who can help! You made it, you saved yourself! So what the hell is wrong?","Your mind slowly accepts what it has been trying to ignore for all this time.","No vibration when you talk.","You don't feel the cold.","You don't remember anything about your life."],void 0,Zt),Xt=new nt("description",["You can't even hear yourself when you yell for them. So perhaps the blizzard is drowning out your voice?","Or maybe they're also injured and in need of help?",'"Hello?" you scream again. This time, you notice it.',"You don't even hear an internal vibration when you scream."],void 0,Kt),eo=new nt("description",["You run right up to the three figures huddled around the campfire.","You stop within 20 meters of them.",'"I need help!", you yell out.',"They don't react.","You walk closer to them. \"Good people! Please help me! I'm lost and I'm freezing!\" you continue.","No reaction."],void 0,Xt),to=new nt("description",["You need the help. You're desperate and you're willing to take a chance on them.","Also, would it make sense for bandits to be camping in the middle of the impassable Forest of Mirrors?","You'd expect highway robbers to be camped around the main roads of the Fated Realm."],void 0,eo),oo=new nt("description",["You don't even feel fatigue as you run. Probably the adrenaline. Survival instinct.","As you get closer to their camp, you see three figures, huddled around the fire.","You stop when you get within earshot of them.","How do you want to approach this?"],{choiceText:"Watch them from a distance. You might be freezing to death and desperate for help, but they might be bandits.",choiceModifiers:null,choiceNextStory:Ut},{choiceText:"Run towards them, screaming for help. You're dying and you need warmth, food, anything they can spare.",choiceModifiers:null,choiceNextStory:to},void 0),no=new nt("description",["No longer being on top of a hill, and with the blizzard roaring, you lose sight of the smoke.","You don't stop running, you can only hope that you've kept the right direction.","Eventually, between the trees, you see a flickering red light.","Someone's campfire is a few hundred meters away from you.","You're saved!"],void 0,oo),io=new nt("description",["You run down the hill.","You run through the Forest of Mirrors in the direction of where you've seen the smoke.","You run for what feels like an hour."],void 0,no),ro=new nt("description",["Knowing that they cannot see you, you float closer to them and take a closer look.","The first person is a woman dressed in a long, thick, dark red coat. You no longer care about the cold, but it's an understandable choice for her. Could the weather have killed you? You shake away these thoughts. It's pointless to speculate for now."],void 0,Nt),ao=new nt("description",["You float closer. It's common knowledge in the Fated Realm that humans cannot see Spirits physically.","To promote their concepts, Spirits have the abilities to affect the material world in ghostly ways. The more powerful the Spirit, the more substantial the effects.","For now, you float closer to the campfire, seeing three people huddled around the bright flame."],void 0,ro),so=new nt("description",["You float for what feels like hours.","Yes. Float. Now that you understand your situation, you realize that you don't have to move your feet to move. Perks of being a Spirit.","Occasionally you open your eyes, occasionally you close them.","It doesn't look like you can see through solid matter, so all you see is the snowy Forest of Mirrors.","Eventually, you see a light. This one's definitely a campfire."],void 0,ao),lo=new nt("description",['To keep going, you tell yourself - "I\'m not dead".','"I died, but I\'m not dead."',"Whoever you were in life, you did enough for the Phoenix of Justice to make you a Spirit of Justice.","You're not dead. You're able to think and to see.","You exist. In a different form now. And you can still save yourself, save your new form.","You just have to do your job and promote Justice.","You remember stories that Spirits can sense life. You close your eyes and try to let your feelings guide you to the nearest people."],void 0,so),co=new nt("description",["Right. So you must be a Spirit of a Phoenix of Justice. Of a Sun. Of the God of Justice.","It's pretty much common knowledge that Spirits exist to further promote the concept, or portfolio, of their Phoenix.","If they fail to promote their concept, the Spirit disappears. Dies, forever","Oh, Gods, is that why you've been feeling weaker and weaker!?","You rise to your 'feet', in panic again. You have to find someone to promote your concept, the idea of Justice, to. Without people to promote Justice to, you'll disappear. And soon, your body feels it."],void 0,lo),ho=new nt("choice",['"My Phoenix". That\'s right.',"You're a Spirit, an Envoy of a Phoenix.","It means that in life, you must have worshipped one of the 20 Suns, or Phoenixes, how they're also called. Done enough, in fact, to have been made a Spirit of that Sun.","Why is it so hard to recall the details of your life?","You concentrate again, sitting there in the snow.","Snowflakes fall right through you. How did you not notice that? Perhaps from the panic, and from your rabid search for help.","'Which Sun did I worship in life? You think.'"],[{choiceText:"The Phoenix of Compassion.",choiceModifiers:"compassionSpirit",choiceNextStory:co},{choiceText:"The Phoenix of Justice.",choiceModifiers:"justiceSpirit",choiceNextStory:co},{choiceText:"The Phoenix of Freedom.",choiceModifiers:"freedomSpirit",choiceNextStory:co},{choiceText:"The Phoenix of Mastery.",choiceModifiers:"masterySpirit",choiceNextStory:co},{choiceText:"The Phoenix of Wisdom.",choiceModifiers:"wisdomSpirit",choiceNextStory:co}],void 0),uo=new nt("choice",["You don't know enough about them. You wonder what kind of Spirit you are.","You close your non-existent eyes. The answer is within you, you just have to feel it."],[{choiceText:"I am a Wraith, a spirit that brings punishment to those who wrong my Phoenix.",choiceModifiers:"classWraith",choiceNextStory:ho},{choiceText:"I am a Poltergeist. Watcher, seer, subtle mastermind in the service of my Phoenix.",choiceModifiers:"classPoltergeist",choiceNextStory:ho},{choiceText:"I am a Guardian Spirit, I exist to guide and protect those who follow my Phoenix.",choiceModifiers:"classGuardianSpirit",choiceNextStory:ho}],void 0),po=new nt("description",["You must be a Spirit.","People who did a lot in the service of a Phoenix reincarnate into Spirits when they die.","There are different kinds of Spirits, you're pretty sure."],void 0,uo),mo=new nt("description",["You sit there for a moment, mind completely blank.","You're dead.","You're conscious, however. You have to be a Spirit, right?","You concentrate - what do you know of Spirits?","When people die, they reincarnate into animals. When animals die, they reincarnate into people.","However, if the dying person had done enough in the worship of one of the 20 Suns, they reincarnate into a Spirit."],void 0,po),fo=new nt("description",["You fall to the snowy ground of the forest, sitting with your legs outstretched in front of you.","Your mind races. Your body still can't feel the cold.","You're really dead."],"FoMspiritKnow",mo),yo=new nt("description",["You bend over and slowly reach with your hand towards the snow.","Your hand passes right through the snow.","You gulp, panic and realization starting to settle in.","Your hand passes right through the snow. You cannot move it.","You didn't wake up here in the Forest of Mirrors.","You died here."],void 0,fo),go=new nt("description",["You try to remember your life, but nothing comes to you.","You focus on your condition. You can't feel the cold.","You look around through the blizzard. You notice something unusual.","You don't seem to leave footprints in the snow.","The blizzard can't fill in the indentations in the snow this fast, can it?"],void 0,yo),wo=new nt("description",["You try to scream, again and again. No sound comes out.","You stomp in the snow, but it doesn't move.","Finally, you approach a tree and reach out to touch its bark.","You gulp, panic and realization starting to settle in, as you slowly reach with your hand to the tree.","Your hand passes right through the tree, disappearing into the bark.","You didn't wake up here in the Forest of Mirrors. You died here, and now you're a Spirit."],void 0,fo),Ao=new nt("description",["You stop. What the hell is going on?","You've been feeling off ever since you woke up.","Now, you're starting to suspect that it's not just the cold and frostbite."],void 0,wo),bo=new nt("description",["'A-a-anybody!'","You yell, but the only sound that you hear is the blizzard.","'Somebody help me!'","You scream again. This time you notice that you don't even feel the vibration in your throat."],"FoMspiritKnow",Ao),vo=new nt("description",["You look around from the top of the hill.","In the distance, you spot a faint glimpse of smoke.","Now this is definitely fire of some kind.","And hope for you.","You rush down the hill towards the fire."],void 0,io),Co=new nt("description",["You keep running through the forest, and manage to reach the top of the hill.","You're not dead yet, despite being in the frozen Forest of Mirrors for at least an hour or two by now.","You're not even out of breath from springing up the hill.","No time to think about it now."],void 0,vo),xo=new nt("description",["No screaming.","You keep running forward.","You sprint through the trees for what feels like an hour.","Finally, you manage to spot a big hill in the forest. It'll give you a vantage point, so you spring in its direction."],"FoMnoSpiritKnow",Co),ko=new nt("choice",["You breathe, trying to keep your warmth.","Blurry vision, can't feel your legs - you might be close to death. You need help.","The Forest of Mirrors is enormous, it takes up a big part of the eastern side of the Fated Realm.","There must be somebody traversing the Forest that could help you.","Should you scream out for help?"],[{choiceText:"Yes. It'll be hard for anyone to hear you through the blizzard, but you're desperate.",choiceModifiers:"FoMscream",choiceNextStory:bo},{choiceText:"No screaming. The only attention it'll attract are tuskwolves.",choiceModifiers:"FoMnoScream",choiceNextStory:xo}],void 0),So=new nt("choice",[" Your vision is getting blurrier.","You need to keep moving. What to do now?"],[{choiceText:"Keep moving, keep exploring the forest.",choiceModifiers:"FoMendExplore",choiceNextStory:ko},{choiceText:"Stop and try to concentrate on your condition.",choiceModifiers:"FoMendConcentrate",choiceNextStory:go}],void 0),Yo=new nt("consequence",[{dependency:"FoMsawWisp",consequenceText:['You remember: "Spirits cannot touch physical objects."',"That creature in the woods - it must have been a Spirit.","It could touch you.","Could you be... dead?","Your thoughts are interrupted as your body is feeling weaker."]},{dependency:"FoMnotSeenWisp",consequenceText:["Maybe you should have asked the campfire people for help. For food. Warmth. Anything.","You feel yourself getting weaker."]}],void 0,So),Io=new nt("consequence",[{dependency:"FoMsearchedBody",consequenceText:["You concentrate, wincing. Trying to think back to your education. What do you know of Spirits?","Let's see... Spirits are the only creatures with magical abilities.","Spirits also... cannot touch physical objects."]},{dependency:"FoMleftBody",consequenceText:["You should be dead by now, but you don't seem to feel the cold.","You can feel panic and frustration growing."]}],void 0,Yo),Bo=new nt("consequence",[{dependency:"FoMsearchedBody",consequenceText:["Stop. Recite the facts.","You woke up in the Forest of Mirrors.","You don't seem to feel the cold.","Your hand went right through that corpse.","Something is off here.","You have a theory."]},{dependency:"FoMleftBody",consequenceText:["Stop. Recite the facts.","You woke up in the Forest of Mirrors."]}],void 0,Io),Eo=new nt("endExploration",["You continue trudging through the snowy woods, looking for any sort of help.","You can't feel weaker with each step, but you still don't feel the cold.","You stop and think."],{unlocked:!1},Bo),To=new nt("description",["You turn around step away from the light.","If it's a campfire, you can't be sure that these people won't be hostile.","And, with the blizzard and your blurred vision - from your injuries? - you can't even be sure that it's a campfire."],"explorationEvent",void 0),Mo=new nt("description",["That must have been... a Spirit, right? You do know of Spirits.","When ordinary people die, they reincarnate into animals.","If a person has done enough in the worship of one of the 20 Suns, they reincarnate into a Spirit.","Snowfall is getting worse. Time to move."],"explorationEvent",void 0),Lo=new nt("item",["The wisp ball flies towards you again. This time you're ready and you land a strike in the middle of its glowing body.","With a fizzing sound, the wisp explodes into tiny specks of light.","You see one of the bigger specks, a fist-sized ball of light, has landed under your feet.","You reach into the snow and pick it up. It emits a warming aura.","[Click the Inventory button to equip items]"],Ue.wispBall,Mo),_o=new nt("battle",["You turn around, trying to keep it in sight.","It seems to be a glowing wisp of light.","It seems to be getting ready to swoop in towards you again.","It's certainly no campfire, and it doesn't seem to be friendly. You need answers, but survival comes first. You're not sure you can take many more of this \"wisp's\" fly-bys. You have nothing but your fists to defend yourself with.","It splits into three as they prepare to attack again."],[ie.wisp1,ie.wisp2,ie.wisp3],Lo),Po=new nt("description",["The blizzard, the trees and the snow don't help.","As you step closer, the light suddenly moves. It flies a little upwards, and then moves closer towards you.","The light speeds up, flying towards you, until it flies right through you, painfully burning your flesh."],"explorationEvent",_o),$o=new nt("description",["You can't help but feel weaker. The cold must be getting to you.","You need help. You decide to walk closer to the light.","You step slowly, trying to see what the light is."],"explorationEvent",Po),qo=new nt("choice",["Your vision is so blurry that you can't quite make out what the light is.","Perhaps, campfire? Perhaps someone is in this forest after all.","It could also be bandits. Poachers. Worshihppers of evil Suns, ready to take advantage of a dying traveler.","Approach the light source?"],[{choiceText:"Slowly approach the light.",choiceModifiers:"FoMsawWisp",choiceNextStory:$o},{choiceText:"Turn around and walk away form the light.",choiceModifiers:"FoMnotSeenWisp",choiceNextStory:To}],void 0),No=new nt("randomEncounter",["You continue trudging through the snow.","You don't seem to feel your feet. You hope it's not due to frostbite.","As you lift your head to look forward, placing your hand against your forehead to block off the wind, you see a light between the trees."],{hasPlayerSeenMe:!1},qo),Oo=new nt("description",["You turn around, not wishing to disturb the corpse.","You'll make it out of here.","Not this way, but you will.","As you walk away from the body, you can't help but feel weaker. Probably frostbite. Right?"],"explorationEvent",["stats","benevolence",10]),Ho=new nt("description",["Your hand moves right through the snow.","You try again. You can't move the snow. Your hand moves right through the corpse too.","You turn around.","At first, you thought that the blizzard filled in any tracks in the snow. Now that you're looking - it's not that.","You're not leaving any footprints in the snow at all.","What the hell is going on?"],"explorationEvent",["stats","evil",10]),Wo=new nt("description",["Alone, with no belongings, in the middle of winter in the Forest of Mirrors?","Yeah, you'll take anything, or it'll be very easy to end up like this person.","You lower yourself towards the body, trying to remove some snow from the body."],"explorationEvent",Ho),Fo=new nt("choice",["Looting would be a new low.","Although...","You're in no condition to be picky.","Search the body?"],[{choiceText:"Search the body.",choiceModifiers:"FoMsearchedBody",choiceNextStory:Wo},{choiceText:"Leave the body alone.",choiceModifiers:"FoMleftBody",choiceNextStory:Oo}],"explorationEvent"),Do=new nt("randomEncounter",["You continue moving through the Forest of Mirrors, when you see a mound in the snow.","The snow seems to be covering something.","Your suspicions are true. It is a lonely body, in the frosted forest, covered in snow."],{hasPlayerSeenMe:!1},Fo),Ro=new nt("description",["Huh? Is it blind? Cursed? Perhaps it's a Spirit's illusion? Or maybe you're hallucinating.","Whatever it is, the tuskwolf at least seems very real. You're not in any condition to investigate.","You won't get another chance. You quickly back away from the tuskwolf while it's confused or distracted."],"explorationEvent",void 0),jo=new nt("description",["The growling seems to be close. Maybe 15 meters behind you.","The tuskwolf doesn't seem to be striking though. Odd.","You slowly turn around.","A big wolf of silver fur stands not far from where you are, two 30 cms long tusks at the ready.","It spins around in place, sniffing and searching for something. It ignores you completely."],"explorationEvent",Ro),zo=new nt("randomEncounter",["As you run through the forest, your thoughts start gather.","You know the Fated Realm quite well.","Judging by the frosted peaks in the distance, this must be the Forest of Mirrors. Named after the clear white snow that lies here for 16 out of the 20 months.","Your thoughts pause as you hear growling behind you. A tuskwolf. Fuck."],{hasPlayerSeenMe:!1},jo),Jo=new nt("exploration",["Your body moves quickly, but the feeling of numbness all over is overwhelming.","Must be the frostbite. If you're lucky, you won't lose any fingers or toes.","In any case, it's time to move, or you'll lose your life as well.","[USE WASD or click the map to move.]"],[{encounterStoryElement:No,tileNumber:"#tile30",icon:ot.iconTree},{encounterStoryElement:Do,tileNumber:"#tile50",icon:ot.iconTree2},{encounterStoryElement:zo,tileNumber:"#tile70",icon:ot.iconTree3},{encounterStoryElement:Eo,tileNumber:"#tile3",icon:ot.iconPerson}],void 0),Go=new nt("description",["Your eyes open again. You feel noticeably weaker. Your vision seems blurry.","The clear evening sky has changed into a navy blue dusk.","You almost let your eyes close again, when you hear the howl of a tuskwolf. Driven by pure instinct, you get to your knees, then to your feet, and start moving.","Everyone has to go one day, but tuskwolf food isn't your way."],void 0,Jo),Qo=new nt("description",["You lie on your belly in the snow, feeling powerless to move.","You almost don't feel the cold. You wonder if it means that you're almost dead already. How did you get here? Were you robbed?","You close your eyes again. Maybe this problem will disappear like a bad dream."],void 0,Go),Uo=new nt("description",["You get to your feet. Again, with surprising ease.","You must not have been out for long. You feel lucky. Frost takes lives quickly.","You look back down. The wind has already done its job - there is almost no indentation in the snow from your body already.","You don't feel particularly cold yet, but you rub your hands for warmth nevertheless."],["gold",200],Jo),Vo=new nt("description",["You seem to be lying on your belly.","You plant your hands in the snow, trying to rise to your knees.","You rise to your knees with surprising ease.","You look around. Your satchel doesn't seem to be with you. How did you get here? Were you robbed?"],void 0,Uo),Zo=new nt("choice",["You open your eyes to see pure white around you.","You lift your head. Treetops covered in sparkling white snow. Clear evening sky. Sounds of the wind."],[{choiceText:"Try to get up.",choiceModifiers:"wakeUpDay",choiceNextStory:Vo},{choiceText:"Continue lying in the snow.",choiceModifiers:"wakeUpNight",choiceNextStory:Qo}],void 0),Ko=new nt("description",["The Highfate bows as the game ends.","She won, but she shows respect and doesn't smile too much.",'Before you politely excuse yourself to leave the table, she smiles at you. "Good game, Serah Somebody."',"...","..."],void 0,Zo),Xo=new nt("item",["The Highfate bows as the game ends.","You won, but you try to show respect and don't smile too much.","Before you politely excuse yourself to leave the table, she hands you a long, beautiful dagger.",'"For your win," she smiles, and moves on.',"...","..."],Ue.goldenDagger,Zo),en=new nt("falsecubes",["The Highfate picks up the stone dice on her side of the marble table.","She rolls them, and covers the results with her hand, smiling."],{opponentName:"The Highfate",opponentLines:{openLine:"Oh, my. The dice are favoring me tonight.",bidLine:"My strategy tonight is quite bold.",bluffLine:"You may not believe me, but the dice speak for themselves.",accuseLine:"I conclude that this is a bluff, Serah.",winLine:"And this one's mine. Thank you for the game.",loseLine:"And this one's yours. You are indeed skilled."},consequences:{win:"prologueFalsecubesWin",lose:"prologueFalsecubesLose"}},{win:Xo,lose:Ko}),tn=new nt("dialogue",[{lineNumber:0,npcLine:'"Serah Somebody," the Highfate says, her speech slow and deliberate. "Care to join me for a game of Falsecubes? We can catch up after we play."',responses:[{dialogueChoice:"Certainly, your grace. It's my honor to be your first opponent tonight.",dialogueNextLine:1,points:1},{dialogueChoice:"I suppose I will. I've always wanted to win at Falsecubes against the Highfate.",dialogueNextLine:2,points:-1}]},{lineNumber:1,npcLine:'"Please, Serah Somebody," the Highfate gestures for you to relax. "You are off duty today. Enjoy the evening and do not fret about formalities."',responses:[{dialogueChoice:"Yes, you are quite right. May the dice favor you in the game, Serah.",dialogueNextLine:3,points:1},{dialogueChoice:"This is how I speak with everybody, Serah Highfate. See? I am relaxing already.",dialogueNextLine:4,points:-1}]},{lineNumber:2,npcLine:'"Is that so?" the Highfate smirks. "Well, then I should be on my best game then."',responses:[{dialogueChoice:"You are always a formidable Falsecubes opponent, your grace. Let us play.",dialogueNextLine:3,points:1},{dialogueChoice:"I can give you a few pointers after the game, Serah Highfate.",dialogueNextLine:4,points:0}]},{lineNumber:3,npcLine:'"Thank you kindly," she says and smiles politely. "May the dice favor you, Serah Somebody."',responses:[{dialogueChoice:"May the better bluffer win.",dialogueNextLine:5,points:1},{dialogueChoice:"With all due respect, I've a feeling that luck is on my side tonight.",dialogueNextLine:5,points:-1}]},{lineNumber:4,npcLine:'"I am glad you are in a joyful mood, Serah Somebody," she says, voice suddenly warm. "It\'s important for me that you\'re comfortable."',responses:[{dialogueChoice:"Likewise, your grace. Let me know if there's any way I can assist you throughout the reception.",dialogueNextLine:5,points:1},{dialogueChoice:"Growing fond of me, your grace? You haven't seen my Falsecubes skill yet.",dialogueNextLine:5,points:-1}]},{lineNumber:5,npcLine:'"Let us play, then. Shall we?" she says, gesturing to the table and the dice.',responses:[]}],["HighfatePolite","HighfateNeutral","HighfateBanter"],en),on=new nt("form",["The Highfate subtly nods in return, and smiles in recognition.","[Please enter your name.]"],void 0,tn),nn=new nt("description",["You take a deep breath, and approach the tall woman in the leather cuirass over a long, intricate, silver robe.","You do your best bow in greetings, and approach the Falsecubes table.","Six marble, four-sides stones painted black, sit at either side of the table."],void 0,on),rn=new nt("description",["You turn away, to go and mingle with the other guests, when the Highfate's eyes meet yours.","Well, no getting out of it now."],void 0,nn),an=new nt("choice",["The Highfate beckons a guest to approach her for a game of Falsecubes.","Do you dare approach her - and be the first guest of today's reception to play the Highfate herself?"],[{choiceText:"I approach the Highfate to play Falsecubes.",choiceModifiers:null,choiceNextStory:nn},{choiceText:"I stay in the reception hall and mingle with the guests.",choiceModifiers:null,choiceNextStory:rn}],void 0),sn=new nt("description",["The Highfate is a world-famous philosopher, and the leader of the Fated Realm.","The guests, however, couldn't be less concerned with philosophy.","Neither the monocles of rich traders, nor the decorative muskets of the adventurers, hint at any other agenda beyond impressing the Highfate."],void 0,an),ln=new nt("description",["The host, the Highfate herself, presents the dice, each a work of art.","As the Highfate moves, the long silver robe that she wears over a leather cuirass flutters in the wind of the massive reception hall."],void 0,sn),cn=new nt("description",["Guests wear noble finery and adventurous attire, mingling by gas lamps.","They carry golden muskets, their mustaches twirled.","The room is alive with glass clinks and murmurs as they prepare to play Falsecubes, a dice game popular among the Fated Realm's adventuring rich."],void 0,ln),dn={prologue1:new nt("description",["[Summer Estate of the Highfate, leader of the Fated Realm.]","Perched on a hill, the manor overlooks the city. Its stone facade is adorned with carvings.","Inside, the parlor is rich and textured, with velvet curtains framing tall windows."],void 0,cn)};const hn=o(287);let un,pn=[],mn=!1,fn={};function yn(){let e=nt.getAllInstances();for(let t=0;t<e.length;t++)switch(e[t].type){case"description":case"item":case"battle":case"exploration":case"randomEncounter":case"form":for(let o=0;o<e[t].text.length;o++)e[t].text[o]=e[t].text[o].replaceAll("ChosenName",fn.name),e[t].text[o]=e[t].text[o].replaceAll("ChosenSurname",fn.surname),e[t].text[o]=e[t].text[o].replaceAll("xe",fn.he),e[t].text[o]=e[t].text[o].replaceAll("xis",fn.his),e[t].text[o]=e[t].text[o].replaceAll("xim",fn.him),e[t].text[o]=e[t].text[o].replaceAll("ximself",fn.himself);break;case"choice":for(let o=0;o<e[t].text.length;o++)e[t].text[o]=e[t].text[o].replaceAll("ChosenName",fn.name),e[t].text[o]=e[t].text[o].replaceAll("ChosenSurname",fn.surname),e[t].text[o]=e[t].text[o].replaceAll("xe",fn.he),e[t].text[o]=e[t].text[o].replaceAll("xis",fn.his),e[t].text[o]=e[t].text[o].replaceAll("xim",fn.him),e[t].text[o]=e[t].text[o].replaceAll("ximself",fn.himself);for(let o=0;o<e[t].modifiers.length;o++)e[t].modifiers[o].choiceText=e[t].modifiers[o].choiceText.replaceAll("ChosenName",fn.name),e[t].modifiers[o].choiceText=e[t].modifiers[o].choiceText.replaceAll("ChosenSurname",fn.surname),e[t].modifiers[o].choiceText=e[t].modifiers[o].choiceText.replaceAll("xe",fn.he),e[t].modifiers[o].choiceText=e[t].modifiers[o].choiceText.replaceAll("xis",fn.his),e[t].modifiers[o].choiceText=e[t].modifiers[o].choiceText.replaceAll("xim",fn.him),e[t].modifiers[o].choiceText=e[t].modifiers[o].choiceText.replaceAll("ximself",fn.himself);break;case"dialogue":for(let o=0;o<e[t].text.length;o++){e[t].text[o].npcLine=e[t].text[o].npcLine.replaceAll("ChosenName",fn.name),e[t].text[o].npcLine=e[t].text[o].npcLine.replaceAll("ChosenSurname",fn.surname),e[t].text[o].npcLine=e[t].text[o].npcLine.replaceAll("xe",fn.he),e[t].text[o].npcLine=e[t].text[o].npcLine.replaceAll("xis",fn.his),e[t].text[o].npcLine=e[t].text[o].npcLine.replaceAll("xim",fn.him),e[t].text[o].npcLine=e[t].text[o].npcLine.replaceAll("ximself",fn.himself);for(let n=0;n<e[t].text[o].responses.length;n++)e[t].text[o].responses[n].dialogueChoice=e[t].text[o].responses[n].dialogueChoice.replaceAll("ChosenName",fn.name),e[t].text[o].responses[n].dialogueChoice=e[t].text[o].responses[n].dialogueChoice.replaceAll("ChosenSurname",fn.surname),e[t].text[o].responses[n].dialogueChoice=e[t].text[o].responses[n].dialogueChoice.replaceAll("xe",fn.he),e[t].text[o].responses[n].dialogueChoice=e[t].text[o].responses[n].dialogueChoice.replaceAll("xis",fn.his),e[t].text[o].responses[n].dialogueChoice=e[t].text[o].responses[n].dialogueChoice.replaceAll("xim",fn.him),e[t].text[o].responses[n].dialogueChoice=e[t].text[o].responses[n].dialogueChoice.replaceAll("ximself",fn.himself)}break;case"consequence":for(let o=0;o<e[t].text.length;o++)for(let n=0;n<e[t].text[o].consequenceText.length;n++)e[t].text[o].consequenceText[n]=e[t].text[o].consequenceText[n].replaceAll("ChosenName",fn.name),e[t].text[o].consequenceText[n]=e[t].text[o].consequenceText[n].replaceAll("ChosenSurname",fn.surname),e[t].text[o].consequenceText[n]=e[t].text[o].consequenceText[n].replaceAll("xe",fn.he),e[t].text[o].consequenceText[n]=e[t].text[o].consequenceText[n].replaceAll("xis",fn.his),e[t].text[o].consequenceText[n]=e[t].text[o].consequenceText[n].replaceAll("xim",fn.him),e[t].text[o].consequenceText[n]=e[t].text[o].consequenceText[n].replaceAll("ximself",fn.himself)}}function gn(){let e=nt.getAllInstances();for(let t=0;t<e.length;t++)switch(e[t].type){case"description":case"item":case"battle":case"choice":case"exploration":case"randomEncounter":case"form":for(let o=0;o<e[t].text.length;o++)e[t].text[o]=e[t].text[o].replaceAll("Justice",ne.spiritConcept.concept);break;case"dialogue":for(let o=0;o<e[t].text.length;o++){e[t].text[o].npcLine=e[t].text[o].npcLine.replaceAll("Justice",ne.spiritConcept.concept);for(let n=0;n<e[t].text[o].responses.length;n++)e[t].text[o].responses[n].dialogueChoice=e[t].text[o].responses[n].dialogueChoice.replaceAll("Justice",ne.spiritConcept.concept)}break;case"consequence":for(let o=0;o<e[t].text.length;o++)for(let n=0;n<e[t].text[o].consequenceText.length;n++)e[t].text[o].consequenceText[n]=e[t].text[o].consequenceText[n].replaceAll("Justice",ne.spiritConcept.concept)}}function wn(e){let t=nt.getAllInstances();for(let o=0;o<t.length;o++)switch(t[o].type){case"description":case"item":case"battle":case"choice":case"exploration":case"randomEncounter":case"form":for(let n=0;n<t[o].text.length;n++)t[o].text[n]=t[o].text[n].replaceAll("Somebody",e);break;case"dialogue":for(let n=0;n<t[o].text.length;n++){t[o].text[n].npcLine=t[o].text[n].npcLine.replaceAll("Somebody",e);for(let i=0;i<t[o].text[n].responses.length;i++)t[o].text[n].responses[i].dialogueChoice=t[o].text[n].responses[i].dialogueChoice.replaceAll("Somebody",e)}break;case"consequence":for(let n=0;n<t[o].text.length;n++)for(let i=0;i<t[o].text[n].consequenceText.length;i++)t[o].text[n].consequenceText[i]=t[o].text[n].consequenceText[i].replaceAll("Somebody",e)}pe.textContent=pe.textContent.replace("Somebody",e)}function An(e){for(;he.firstChild;)he.removeChild(he.firstChild);void 0!==e?"separator"==e.type?function(e,t,o){let n;for(let o=0;o<e.text.length;o++)t.includes(e.text[o].dependency)&&(n=o);null!==n&&o(e.text[n].nextStoryElement)}(e,pn,An):"stats"==e[0]||"gold"==e[0]?"stats"==e[0]?_n(e[1],e[2]):Te(e[1]):void 0!==e&&("dialogue"!==e.type&&"consequence"!==e.type?bn(e,0):"dialogue"==e.type?xn(e,0):vn(e,0)):En(Bn,In)}function bn(e,t,o){"randomEncounter"!=e.type&&"explorationEvent"!=e.modifiers&&"explorationEvent"!=e.nextStoryElement||(Sn=!1);let u=document.createElement("p");if(u.textContent=e.text[t],"yellow"==o&&u.setAttribute("style","color:yellow;"),he.appendChild(u),t<e.text.length){let o=document.createElement("button");o.textContent="Click here to continue.",he.appendChild(o),o.focus(),o.addEventListener("click",(()=>{if(t++,he.removeChild(o),bn(e,t),t==e.text.length){switch(e.type){case"falsecubes":!function(e){!function(e,t,o,u){for(;n.firstChild;)n.removeChild(n.firstChild);let p=document.createElement("p");p.setAttribute("style","color:yellow"),p.textContent="[You are about to play Falsecubes. Here are the instructions: You and opponent have 6 dice each. You roll them in secret. Then you take it in turns to make increasingly high bets about how many dice of a certain roll are in your hand until one of them calls the other out on a bluff and confirms which dice are really on the table.]",n.appendChild(p);let y=document.createElement("button");y.textContent="Let's play Falsecubes!",n.appendChild(y),y.addEventListener("click",(()=>{!function(e,t,o,u){let p=document.createElement("p");p.textContent=`${e}: ${t.openLine}`,n.appendChild(p);let y=document.createElement("button");y.textContent="Roll the dice.",n.appendChild(y),y.addEventListener("click",(()=>{n.removeChild(y),function(e,t,o,u){i.result=Math.floor(4*Math.random()+1),r.result=Math.floor(4*Math.random()+1),a.result=Math.floor(4*Math.random()+1),s.result=Math.floor(4*Math.random()+1),l.result=Math.floor(4*Math.random()+1),c.result=Math.floor(4*Math.random()+1),h=[Math.floor(4*Math.random()+1),Math.floor(4*Math.random()+1),Math.floor(4*Math.random()+1),Math.floor(4*Math.random()+1),Math.floor(4*Math.random()+1),Math.floor(4*Math.random()+1)];let p=document.createElement("p");p.textContent=`You rolled: ${i.result}, ${r.result}, ${a.result}, ${s.result}, ${l.result}, ${c.result}.`,n.appendChild(p);let y=document.createElement("form");n.appendChild(y);for(let e=0;e<6;e++){let t=document.createElement("input");t.setAttribute("type","checkbox"),t.setAttribute("value",`${e+1}`),t.setAttribute("name",`${e+1}`),t.classList.add("checkmark");let o=document.createElement("label");o.setAttribute("for",`${e+1}`),o.textContent=`Dice ${e+1}`,y.appendChild(t),y.appendChild(o);let n=document.createElement("br");y.appendChild(n)}let g=document.createElement("input");g.setAttribute("type","submit"),g.setAttribute("style","margin-top: 10px;"),y.appendChild(g);let w=h.filter((e=>1==e)),A=h.filter((e=>2==e)),b=h.filter((e=>3==e)),v=h.filter((e=>4==e)),C=[{number:w.length,dots:1},{number:A.length,dots:2},{number:b.length,dots:3},{number:v.length,dots:4}];console.log(`Orig opponentHand: ${h}`);let x,k,S=C.sort(((e,t)=>e.number>t.number?-1:1));0!==S[3].number?(x=S[3].dots,console.log(`Bad dots: ${x}`),k=S[2].dots,console.log(`Second bad dots: ${k}`)):(x=S[2].dots,console.log(`Bad dots: ${x}`),k=S[1].dots,console.log(`Second bad dots: ${k}`));let Y=h.filter((e=>e!==x&&e!==k));for(;Y.length<6;){let e=m();Y.push(e)}h=Y,console.log(`New Opponent Hand: ${h}`),y.addEventListener("submit",(function(n){n.preventDefault();for(let e=0;e<6;e++)document.querySelector(`input[name="${e+1}"`).checked&&(d[e].reRollFlag=!0);let i=0;for(;i<6;)if(1==d[i].reRollFlag){d.splice(i,1);let e={result:m(),reRollFlag:!1};d.push(e)}else i++;f(e,t,o,u)}))}(e,t,o,u)}))}(e,t,o,u),n.removeChild(y)}))}(e.modifiers.opponentName,e.modifiers.opponentLines,Pn,e)}(e);break;case"description":void 0!==e.modifiers&&pn.push(e.modifiers),An(e.nextStoryElement);break;case"battle":!function(e){e.modifiers.forEach((e=>{e.currentHP=e.maxHP})),H.splice(0,H.length,...e.modifiers),kn=e;let t=document.querySelector("#explorationBoard");null!==t&&(t.style.display="none"),D()}(e);break;case"item":!function(e){ne.inventory.push(e);let t=document.createElement("li");if(t.textContent=`${e.name}, ${e.type}. Attack bonus: ${e.itemAttack}. Armor bonus: ${e.itemArmor}.`,Pe.appendChild(t),"quest item"!==e.type){let t=document.createElement("button");t.addEventListener("click",(()=>$e(e))),t.textContent="Equip",t.setAttribute("style","font-size: 70%;"),t.setAttribute("id",`${e.id}`),Pe.appendChild(t)}}(e.modifiers),un={text:[`Acquired ${e.modifiers.name}!`],type:"itemAcquired",nextStoryElement:e.nextStoryElement},bn(un,0,"yellow");break;case"itemAcquired":An(un.nextStoryElement);break;case"choice":!function(e){e.modifiers.forEach((e=>{let t=document.createElement("button");t.textContent=e.choiceText,t.setAttribute("class","choiceButton"),he.appendChild(t),t.addEventListener("click",(()=>{pn.push(e.choiceModifiers),"classWraith"==e.choiceModifiers?(Object.setPrototypeOf(ne,ee.prototype),ee.call(ne,ne.name,0,10,20,100,"Normal Attack","","","",[]),pe.textContent=pe.textContent.replace("Your class is unknown.","You are a Wraith."),ye.addEventListener("click",(()=>{Q(ne)})),hn.emit("Wraith")):"classPoltergeist"==e.choiceModifiers?(Object.setPrototypeOf(ne,te.prototype),te.call(ne,ne.name,0,10,20,100,"Normal Attack","","","",[]),pe.textContent=pe.textContent.replace("Your class is unknown.","You are a Poltegeist."),ye.addEventListener("click",(()=>{Q(ne)})),hn.emit("Poltergeist")):"classGuardianSpirit"==e.choiceModifiers&&(Object.setPrototypeOf(ne,oe.prototype),oe.call(ne,ne.name,0,10,20,100,"Normal Attack","","","",[]),pe.textContent=pe.textContent.replace("Your class is unknown.","You are a Guardian Spirit."),ye.addEventListener("click",(()=>{Q(ne)})),hn.emit("GuardianSpirit")),"raceRealmer"==e.choiceModifiers?(ne.race=V.Realmer,pe.textContent=pe.textContent.replace(" Your armor class"," In life, you were a Realmer. Your armor class"),ne.currentHP+=ne.race.raceHPBonus,ne.maxHP+=ne.race.raceHPBonus,ne.armorClass+=ne.race.raceArmorBonus,re(),document.querySelector("#stats_race").textContent="In life, you were a Realmer."):"raceMortar"==e.choiceModifiers?(ne.race=V.Mortar,pe.textContent=pe.textContent.replace(" Your armor class"," In life, you were a Mortar. Your armor class"),ne.currentHP+=ne.race.raceHPBonus,ne.maxHP+=ne.race.raceHPBonus,ne.armorClass+=ne.race.raceArmorBonus,re(),stats_race.textContent="In life, you were a Mortar."):"raceDeadlander"==e.choiceModifiers&&(ne.race=V.Deadlander,pe.textContent=pe.textContent.replace(" Your armor class"," In life, you were a Deadlander. Your armor class"),ne.currentHP+=ne.race.raceHPBonus,ne.maxHP+=ne.race.raceHPBonus,ne.armorClass+=ne.race.raceArmorBonus,re(),stats_race.textContent="In life, you were a Deadlander."),"compassionSpirit"==e.choiceModifiers&&(ne.spiritConcept.concept="Compassion",ne.spiritConcept.description=" of Compassion",re(),gn()),"justiceSpirit"==e.choiceModifiers&&(ne.spiritConcept.concept="Justice",ne.spiritConcept.description=" of Justice",re(),gn()),"freedomSpirit"==e.choiceModifiers&&(ne.spiritConcept.concept="Freedom",ne.spiritConcept.description=" of Freedom",re(),gn()),"masterySpirit"==e.choiceModifiers&&(ne.spiritConcept.concept="Mastery",ne.spiritConcept.description=" of Mastery",re(),gn()),"wisdomSpirit"==e.choiceModifiers&&(ne.spiritConcept.concept="Wisdom",ne.spiritConcept.description=" of Wisdom",re(),gn()),"chosenPeculiar"==e.choiceModifiers&&(fn=se("Peculiar","Quirke","she","her","her","herself"),yn()),"chosenSnapdragon"==e.choiceModifiers&&(fn=se("Snapdragon","Quirke","he","his","him","himself"),yn()),"chosenLysander"==e.choiceModifiers&&(fn=se("Lysander","MacAppleby","they","their","them","themselves"),yn()),An(e.choiceNextStory)}))}))}(e);break;case"exploration":!function(e){for(In=e;he.firstChild;)he.removeChild(he.firstChild);let t=document.createElement("div");t.setAttribute("id","explorationBoard");let o=document.createElement("div");o.setAttribute("style","border-collapse:collapse; margin:3px; display:inline-grid; grid-template-columns: repeat(6, 25px);"),o.setAttribute("id","boardUnder"),ue.appendChild(t),t.appendChild(o);for(let e=0;e<126;e++){let t=document.createElement("div");t.setAttribute("style","padding:5px;border:1px solid white;height:15px;width:15px;"),t.setAttribute("id",`tile${e}`),o.appendChild(t)}!function(e){let t=document.querySelectorAll('[id^="tile"]');for(let o=0;o<t.length;o++)for(let n=0;n<e.modifiers.length-1;n++)`#${t[o].id}`==e.modifiers[n].tileNumber&&(t[o].style.position="relative",e.modifiers[n].icon.style.position="absolute",t[o].appendChild(e.modifiers[n].icon))}(e);let n=document.createElement("div");n.setAttribute("id","circle"),n.setAttribute("style","background-color:white;border:1px solid white;border-radius:50%; z-index:10; height: 17px; width: 17px;"),n.setAttribute("tabindex","0"),document.querySelector("#tile120").appendChild(n);let i=n.getBoundingClientRect().x,r=n.getBoundingClientRect().y,a=i,s=r;document.addEventListener("keydown",(t=>{let l=o.getBoundingClientRect();switch(t.key){case"w":s-5>l.top&&1==Sn&&(console.log("w"),s-=5,En(Bn(n),e));break;case"a":a-5>l.left&&1==Sn&&(a-=5,En(Bn(n),e));break;case"s":s+5+20<l.bottom&&1==Sn&&(s+=5,En(Bn(n),e));break;case"d":a+5+18<l.right&&1==Sn&&(a+=5,En(Bn(n),e))}let c=s-r,d=a-i;n.style.transform=`translate(${d}px, ${c}px)`})),o.addEventListener("click",(t=>{if(1==Sn){let o=document.querySelector(`#${function(e,t){let o=document.querySelectorAll('[id^="tile"]');for(let n=0;n<o.length;n++){let i=o[n].getBoundingClientRect();if(e<i.right&&e>i.left&&t<i.bottom&&t>i.top)return o[n].id}return null}(t.clientX,t.clientY)}`).getBoundingClientRect(),l=o.left+4-i,c=o.top+4-r+window.scrollY;n.style.transform=`translate(${l}px, ${c}px)`,En(Bn(n),e),a=o.left+4,s=o.top+4+window.scrollY}}))}(e),mn=!0;break;case"randomEncounter":for(;he.firstChild;)he.removeChild(he.firstChild);e.modifiers.hasPlayerSeenMe=!0,Yn++,Sn=!0;let t=Bn(document.querySelector("#circle"));for(let e=0;e<126;e++){let o=document.querySelector(`#tile${e}`);o.id==t&&o.hasChildNodes&&o.removeChild(o.firstChild)}An(e.nextStoryElement);break;case"endExploration":let o=document.querySelector("#explorationBoard");for(ue.removeChild(o);ue.firstChild;)ue.removeChild(ue.firstChild);An(e.nextStoryElement);break;case"form":!function(e){let t=document.createElement("div"),o=document.createElement("form"),n=document.createElement("input"),i=document.createElement("input");i.setAttribute("type","submit"),n.setAttribute("type","text"),o.appendChild(n),o.appendChild(i),t.appendChild(o),he.appendChild(t),i.addEventListener("click",(t=>{t.preventDefault();let o=n.value;for(ne.name=o,wn(o);he.firstChild;)he.removeChild(he.firstChild);An(e.nextStoryElement)}))}(e)}"explorationEvent"==e.modifiers?Sn=!0:void 0!==e.modifiers&&("stats"!=e.modifiers[0]&&"gold"!=e.modifiers[0]||("stats"==e.modifiers[0]?_n(e.modifiers[1],e.modifiers[2]):Te(e.modifiers[1])))}}))}}function vn(e,t){let o=document.createElement("p"),n=null;for(let t=0;t<e.text.length;t++)pn.includes(e.text[t].dependency)&&(n=t);if(null!==n){if(o.textContent=e.text[n].consequenceText[t],he.appendChild(o),t<e.text[n].consequenceText.length){let o=document.createElement("button");o.textContent="Click here to continue.",he.appendChild(o),o.focus(),o.addEventListener("click",(()=>{t++,he.removeChild(o),vn(e,t)}))}t==e.text[n].consequenceText.length&&An(e.nextStoryElement)}else An(e.nextStoryElement)}let Cn=0;function xn(e,t){let o=document.createElement("p");if(o.textContent=e.text[t].npcLine,he.appendChild(o),t!==e.text.length-1)e.text[t].responses.forEach((t=>{let o=document.createElement("button");o.textContent=t.dialogueChoice,he.appendChild(o),o.setAttribute("class","choiceButton"),o.addEventListener("click",(()=>{he.querySelectorAll("button").forEach((e=>{e.remove()}));let o=document.createElement("p");o.textContent=`"${t.dialogueChoice}"`,he.appendChild(o),Cn+=t.points,xn(e,t.dialogueNextLine)}))}));else{Cn<=-2?pn.push(e.modifiers[2]):Cn<2?pn.push(e.modifiers[1]):Cn>=2&&pn.push(e.modifiers[0]),Cn=0;let t=document.createElement("button");t.textContent="Click here to continue.",he.appendChild(t),t.focus(),t.addEventListener("click",(()=>{An(e.nextStoryElement)}))}}let kn=null;hn.on("battle:win",(()=>{1==mn&&(document.querySelector("#explorationBoard").style.display="grid");let e=document.createElement("p");for(e.textContent="You win the battle!",de.appendChild(e);de.children.length>2;)de.removeChild(de.firstChild);for(Array.from(de.children).forEach((e=>{e.setAttribute("style","color:white;")})),ce.removeChild(ce.firstChild);he.firstChild;)he.removeChild(he.firstChild);An(kn.nextStoryElement),kn=null})),hn.on("battle:lose",(()=>{let e=document.createElement("p");e.textContent="You died!",e.setAttribute("style","color:red;"),de.appendChild(e),me.removeChild(fe),me.removeChild(ye),me.removeChild(ge),me.removeChild(we)}));let Sn=!0,Yn=0,In="";function Bn(e){let t=e.getBoundingClientRect(),o=document.querySelectorAll('[id^="tile"]');for(let e=0;e<o.length;e++){let n=o[e].getBoundingClientRect();if(t.left<n.right&&t.right>n.left&&t.top<n.bottom&&t.bottom>n.top)return o[e].id}return null}function En(e,t){for(let o=0;o<t.modifiers.length-1;o++)`#${e}`!=t.modifiers[o].tileNumber||t.modifiers[o].encounterStoryElement.modifiers.hasPlayerSeenMe||An(t.modifiers[o].encounterStoryElement);Yn==t.modifiers.length-1&&(t.modifiers[t.modifiers.length-1].unlocked=!0,function(e){let t=document.querySelectorAll('[id^="tile"]');for(let o=0;o<t.length;o++)`#${t[o].id}`==e.modifiers[e.modifiers.length-1].tileNumber&&(t[o].style.position="relative",e.modifiers[e.modifiers.length-1].icon.style.position="absolute",t[o].appendChild(e.modifiers[e.modifiers.length-1].icon))}(t)),`#${e}`==t.modifiers[t.modifiers.length-1].tileNumber&&t.modifiers[t.modifiers.length-1].unlocked&&(An(t.modifiers[t.modifiers.length-1].encounterStoryElement),Yn=0)}let Tn=0,Mn=0,Ln=document.createElement("dialog");function _n(e,t){switch(e){case"evil":Tn-=t;break;case"benevolent":Tn+=t;break;case"somber":Mn-=t;break;case"silly":Mn+=t}!function(){let e=document.querySelector("#stats_meter_evil"),t=document.querySelector("#stats_meter_somber");e.style.gridTemplateColumns=`${50-Tn}fr ${50+Tn}fr`,t.style.gridTemplateColumns=`${50-Mn}fr ${50+Mn}fr`}(),Tn>14&&(pn.push("playerBenevolent15"),Tn>29&&pn.push("playerBenevolent30")),Tn<-14&&(pn.push("playerEvil15"),Tn<-29&&pn.push("playerEvil30")),Mn>14&&(pn.push("playerSilly15"),Mn>29&&pn.push("playerSilly30")),Mn<-14&&(pn.push("playerSomber15"),Mn<-29&&pn.push("playerSomber15"))}function Pn(e,t){"win"==e?(pn.push(t.modifiers.consequences.win),An(t.nextStoryElement.win)):(pn.push(t.modifiers.consequences.lose),An(t.nextStoryElement.lose))}Ln.innerHTML="\n    <button id='closeButton2'>Close</button>\n    <div id='statsBox'>\n    <h2>Stats</h2>\n    <ul id ='statsList'>\n        <li id='stats_gender'>You do not remember your gender.</li>\n        <li id='stats_race'>You do not remember your race.</li>\n        <li id='stats_romantic_partner'>You do not remember who your romantic partner was.</li>\n        <li id='stats_cause_of_death'>You do not remember your cause of death.</li>\n        <li id='stats_evil_benevolent'>\n            <div class='stats_meter' id='stats_meter_evil'>\n                <div class='stats_line' id='stats_line_evil'>Evil</div>\n                <div class='stats_line' id='stats_line_benevolent'>Benevolent</div>\n            </div>\n        </li>\n        <li id='stats_somber_silly'>\n            <div class='stats_meter' id='stats_meter_somber'>\n                <div class='stats_line' id='stats_line_somber'>Somber</div>\n                <div class='stats_line' id='stats_line_silly'>Silly</div>\n            </div>\n        </li>\n    </ul>\n    </div>\n",document.body.appendChild(Ln),document.addEventListener("DOMContentLoaded",(()=>{we.addEventListener("click",(()=>{(pn.includes("classWraith")||pn.includes("classPoltergeist")||pn.includes("classGuardianSpirit"))&&(Ln.showModal(),document.querySelector("#closeButton2").addEventListener("click",(()=>{Ln.classList.add("hide"),Ln.addEventListener("animationend",Ae)})))}))})),An(dn.prologue1)},127:(e,t,o)=>{"use strict";e.exports=o.p+"3835161464e8cef066ac.ttf"}},e=>{e(e.s=860)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,